{"version":3,"sources":["webpack:///./node_modules/ngx-soundmanager2/fesm5/ngx-soundmanager2.js","webpack:///./src/app/songDetails/songDetails.component.css","webpack:///./src/app/songDetails/songDetails.component.html","webpack:///./src/app/songDetails/songDetails.component.ts","webpack:///./src/app/songDetails/songDetails.module.ts","webpack:///./src/app/songDetails/songDetails.routing.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuI;;AAEvI;AACA;AACA,cAAc,WAAW;AACzB;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,UAAU,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,UAAU,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,0DAAY;AACvD,+CAA+C,0DAAY;AAC3D,iDAAiD,0DAAY;AAC7D,+CAA+C,0DAAY;AAC3D,gDAAgD,0DAAY;AAC5D,iDAAiD,0DAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,gCAAgC,EAAE,UAAU,kCAAkC;AAC9E,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,gCAAgC,EAAE,UAAU,kCAAkC;AAC9E,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,qDAAqD;AACrD,SAAS,6BAA6B,OAAO,oDAAM,2BAA2B,GAAG,OAAO,sDAAQ,EAAE,IAAI;AACtG,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,yDAAyD;AACzD,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,0DAA0D;AAC1D,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,0DAA0D;AAC1D,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,uDAAuD;AACvD,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,yBAAyB,OAAO,mDAAK,EAAE;AACvC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,qDAAqD;AACrD,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,qDAAqD;AACrD,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,sDAAsD;AACtD,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gCAAgC,EAAE,UAAU,wBAAwB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,mDAAmD;AACnD,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,mBAAmB,OAAO,mDAAK,EAAE;AACjC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,4DAA4D;AAC5D,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,kBAAkB,OAAO,mDAAK,EAAE;AAChC,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,qDAAqD;AACrD,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,yDAAyD;AACzD,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,8DAA8D;AAC9D,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,kBAAkB,OAAO,mDAAK,EAAE;AAChC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,uDAAuD;AACvD,SAAS,4BAA4B;AACrC,SAAS,OAAO,wDAAU,GAAG;AAC7B,MAAM;AACN;AACA,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,qDAAqD;AACrD,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,qBAAqB,OAAO,0DAAY,gCAAgC;AACxE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,kDAAI,UAAU,oBAAoB;AAClD;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,yDAAyD,WAAW;AACpE;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;;AAE6Z;AAC7Z;;;;;;;;;;;;ACzgDA,gCAAgC,sBAAsB,GAAG,iBAAiB,mBAAmB,GAAG,iBAAiB,kCAAkC,uBAAuB,GAAG,YAAY,wBAAwB,GAAG,qBAAqB,sBAAsB,iBAAiB,GAAG,gBAAgB,qBAAqB,GAAG,qBAAqB,qBAAqB,GAAG,eAAe,yBAAyB,GAAG,G;;;;;;;;;;;ACAnZ,wqBAAwqB,UAAU,wOAAwO,MAAM,oEAAoE,aAAa,0FAA0F,MAAM,qEAAqE,YAAY,mFAAmF,MAAM,qEAAqE,KAAK,2FAA2F,aAAa,8JAA8J,mCAAmC,2GAA2G,aAAa,kBAAkB,gHAAgH,kBAAkB,wMAAwM,oCAAoC,oiCAAoiC,quBAAquB,sBAAsB,OAAO,MAAM,4EAA4E,uBAAuB,MAAM,MAAM,0KAA0K,6BAA6B,ofAAof,+mCAA+mC,UAAU,8UAA8U,QAAQ,02BAA02B,YAAY,qEAAqE,cAAc,kgBAAkgB,aAAa,sKAAsK,kBAAkB,8PAA8P,wBAAwB,MAAM,yBAAyB,IAAI,mCAAmC,KAAK,oCAAoC,oNAAoN,aAAa,mDAAmD,SAAS,sSAAsS,cAAc,yd;;;;;;;;;;;;;;;;;;;;;;;;;ACAprR;AACN;AAOvD;IAsEE,8BAAoB,mBAAuC;QAAvC,wBAAmB,GAAnB,mBAAmB,CAAoB;QArE3D,UAAK,GAAG,4BAA4B,CAAC;QAErC,UAAK,GAAG;YACN;gBACE,EAAE,EAAE,KAAK;gBACT,KAAK,EAAE,SAAS;gBAChB,MAAM,EAAE,kBAAkB;gBAC1B,GAAG,EAAE,uIAAuI;aAC7I;;;;;;;;;;;;;;;;;;;;;;;;eAwBE;SACJ,CAAC;QAEF,aAAQ,GAAG;YACT;gBACE,YAAY,EAAE,KAAK;gBACnB,aAAa,EAAE,YAAY;gBAC3B,mBAAmB,EAAC,6BAA6B;aAClD;YACD;gBACE,YAAY,EAAE,KAAK;gBACnB,aAAa,EAAE,YAAY;gBAC3B,mBAAmB,EAAC,6BAA6B;aAClD;SACF,CAAC;QAgBF,GAAG;QACH,gBAAW,GAAG,SAAS,CAAC;QACxB,eAAU,GAAG,kBAAkB,CAAC;QAChC,QAAG,GAAG,UAAU,CAAC;QACjB,gBAAW,GAAG,EAAE,CAAC;QACjB,WAAM,GAAG,KAAK,CAAC;IAE+C,CAAC;IAE/D,uCAAQ,GAAR;QAAA,iBA0BC;QAzBC,IAAI,CAAC,QAAQ,GAAG,2KAA2K;QAC3L,gDAAgD;QAChD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE,CAAC;QACrD,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,mBAAmB,CAAC,2BAA2B;aACrF,SAAS,CAAC,UAAC,KAAU;YACpB,KAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACzB,CAAC,CAAC,CAAC;QAEL,8BAA8B;QAC9B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,CAAC;QAElE,IAAI,CAAC,+BAA+B,GAAG,IAAI,CAAC,mBAAmB,CAAC,4BAA4B;aACzF,SAAS,CAAC,UAAC,KAAU;YACpB,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,CAAC;YAClE,KAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC;YACpD,KAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC;YACrD,KAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC;QACvD,CAAC,CAAC,CAAC;QAEL,+BAA+B;QAC/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,CAAC;QACnD,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,mBAAmB,CAAC,6BAA6B;aACzF,SAAS,CAAC,UAAC,KAAU;YACpB,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0CAAW,GAAX;QACE,IAAI,CAAC,4BAA4B,CAAC,WAAW,EAAE,CAAC;QAChD,IAAI,CAAC,+BAA+B,CAAC,WAAW,EAAE,CAAC;QACnD,IAAI,CAAC,8BAA8B,CAAC,WAAW,EAAE,CAAC;IACpD,CAAC;IAED,sBAAI,0CAAQ;aAAZ;YACE,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACzF,CAAC;;;OAAA;IAED,sBAAI,0CAAQ;aAAZ;YACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;QAChD,CAAC;;;OAAA;IAhHU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;;;SAGhC,CAAC;yCAuEyC,oEAAkB;OAtEhD,oBAAoB,CAkHhC;IAAD,2BAAC;CAAA;AAlHgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRQ;AACM;AACA;AACmB;AAClE,2DAA2D;AACZ;AACgB;AACL;AAEC;AAc3D;IAAA;IAAiC,CAAC;IAArB,iBAAiB;QAX7B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,wEAAsB,CAAC,OAAO,EAAE;gBAChC,4DAAY,CAAC,QAAQ,CAAC,sEAAiB,CAAC;gBACxC,0DAAW;gBACX,0DAAc;gBACd,kEAAmB;aACpB;YACD,YAAY,EAAE,CAAC,2EAAoB,CAAC;SACrC,CAAC;OACW,iBAAiB,CAAI;IAAD,wBAAC;CAAA;AAAJ;;;;;;;;;;;;;ACrB9B;AAAA;AAAA;AAA+D;AAExD,IAAM,iBAAiB,GAAW;IACrC;QAEE,IAAI,EAAE,EAAE;QACR,QAAQ,EAAE,CAAE;gBACV,IAAI,EAAE,0BAA0B;gBAChC,SAAS,EAAE,2EAAoB;aAClC,CAAC;KACL;CACA,CAAC","file":"songDetails-songDetails-module.js","sourcesContent":["import { Inject, Injectable, EventEmitter, Optional, Directive, HostListener, Input, ElementRef, Pipe, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {string} */\nvar MusicPlayerEventConstants = {\n    ANGULAR_PLAYER_READY: 'angularPlayer:ready',\n    // CURRENT_TRACK_DURATION = 'currentTrack:duration',\n    // CURRENT_TRACK_POSITION = 'currentTrack:position',\n    MUSIC_IS_PLAYING: 'music:isPlaying',\n    MUSIC_MUTE: 'music:mute',\n    MUSIC_REPEAT: 'music:repeat',\n    MUSIC_VOLUME: 'music:volume',\n    PLAYER_PLAYLIST: 'player:playlist',\n    SOUND_MANAGER_READY: 'Sound manager ready!',\n    TRACK_ID: 'track:id',\n    TRACK_LOADED: 'track:loaded',\n    TRACK_STOP: 'track:stop',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MusicPlayerUtils = /** @class */ (function () {\n    function MusicPlayerUtils() {\n    }\n    /**\n     *\n     * @param track\n     */\n    /**\n     *\n     * @param {?} track\n     * @return {?}\n     */\n    MusicPlayerUtils.IsTrackValid = /**\n     *\n     * @param {?} track\n     * @return {?}\n     */\n    function (track) {\n        if (typeof track === 'undefined') {\n            console.warn('invalid track data');\n            return false;\n        }\n        if (track.url.indexOf('soundcloud') > -1) {\n            // if soundcloud url\n            if (typeof track.url === 'undefined') {\n                console.warn('invalid soundcloud track url');\n                return false;\n            }\n        }\n        else {\n            if (soundManager.canPlayURL(track.url) !== true) {\n                console.warn('invalid song url');\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * getIndexByValue used by this service\n     */\n    /**\n     * getIndexByValue used by this service\n     * @param {?} array\n     * @param {?} value\n     * @return {?}\n     */\n    MusicPlayerUtils.GetIndexByValue = /**\n     * getIndexByValue used by this service\n     * @param {?} array\n     * @param {?} value\n     * @return {?}\n     */\n    function (array, value) {\n        for (var /** @type {?} */ i = 0; i < array.length; i++) {\n            if (array[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    /**\n     * To check if value is in array\n     */\n    /**\n     * To check if value is in array\n     * @param {?} array\n     * @param {?} value\n     * @return {?}\n     */\n    MusicPlayerUtils.IsInArray = /**\n     * To check if value is in array\n     * @param {?} array\n     * @param {?} value\n     * @return {?}\n     */\n    function (array, value) {\n        for (var /** @type {?} */ i = 0; i < array.length; i++) {\n            if (array[i].id === value) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    /**\n     * asyncLoop\n     * @param o\n     */\n    /**\n     * asyncLoop\n     * @param {?} o\n     * @return {?}\n     */\n    MusicPlayerUtils.AsyncLoop = /**\n     * asyncLoop\n     * @param {?} o\n     * @return {?}\n     */\n    function (o) {\n        var /** @type {?} */ i = -1;\n        var /** @type {?} */ loop = function () {\n            i++;\n            if (i === o.length) {\n                o.callback();\n                return;\n            }\n            o.functionToLoop(loop, i);\n        };\n        loop(); // init\n    };\n    return MusicPlayerUtils;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MusicPlayerService = /** @class */ (function () {\n    function MusicPlayerService(setupOptions) {\n        this.setupOptions = setupOptions;\n        this.currentTrack = null;\n        this.repeat = false;\n        this.autoPlay = true;\n        this.isPlaying = false;\n        this.trackProgress = 0;\n        this.volume = 90;\n        this.playlist = [];\n        this.musicPlayerEventEmitter = new EventEmitter();\n        this.musicPlayerMuteEventEmitter = new EventEmitter();\n        this.musicPlayerRepeatEventEmitter = new EventEmitter();\n        this.musicPlayerStopEventEmitter = new EventEmitter();\n        this.musicPlayerTrackEventEmitter = new EventEmitter();\n        this.musicPlayerVolumeEventEmitter = new EventEmitter();\n        this.init(setupOptions);\n    }\n    /**\n     * Initialize soundmanager,\n     * requires soundmanager2 to be loaded first\n     */\n    /**\n     * Initialize soundmanager,\n     * requires soundmanager2 to be loaded first\n     * @param {?=} setupOptions\n     * @return {?}\n     */\n    MusicPlayerService.prototype.init = /**\n     * Initialize soundmanager,\n     * requires soundmanager2 to be loaded first\n     * @param {?=} setupOptions\n     * @return {?}\n     */\n    function (setupOptions) {\n        var _this = this;\n        if (typeof soundManager === 'undefined') {\n            alert('Please include SoundManager2 Library!');\n        }\n        Object.assign(soundManager.setupOptions, setupOptions);\n        soundManager.setupOptions.ignoreMobileRestrictions = true;\n        this._soundObject = soundManager.setup({\n            preferFlash: false,\n            // prefer 100% HTML5 mode, where both supported\n            debugMode: false,\n            // enable debugging output\n            useHTML5Audio: true,\n            // http://www.schillmania.com/projects/soundmanager2/doc/#soundmanager-usehtml5audio\n            /**\n                   * @reference http://www.schillmania.com/projects/soundmanager2/doc/#sm-config\n                   * @description onready Events (Callbacks)\n                   * Queues an event callback/handler for successful initialization and \"ready to use\" state of SoundManager 2.\n                   * An optional scope parameter can be specified; if none, the callback is scoped to the window.\n                   * If onready() is called after successful initialization, the callback will be executed immediately.\n                   * The onready() queue is processed before soundManager.onload().\n                   */\n            onready: function () {\n                // Assign instance of this Angular MusicPlayerService to soundManager object\n                // so that the SMSound Objects can access it\n                soundManager.parent = _this;\n                // Ready to use; soundManager.createSound() etc. can now be called.\n                // Emit event\n                var /** @type {?} */ isSupported = soundManager.ok();\n                _this.musicPlayerEventEmitter.emit({\n                    event: MusicPlayerEventConstants.ANGULAR_PLAYER_READY,\n                    data: isSupported\n                });\n            },\n            /**\n                   * @reference http://www.schillmania.com/projects/soundmanager2/doc/#sm-config\n                   * @description ontimeout Events (Callbacks)\n                   * Queues an event callback/handler for SM2 init failure, processed at (or immediately,\n                   * if added after) SM2 initialization has failed, just before soundManager.onerror() is called.\n                   * An optional scope parameter can be specified; if none, the callback is scoped to the window.\n                   * Additionally, a status object containing success and error->type parameters is passed as an argument to your callback.\n                   */\n            ontimeout: function () {\n                alert('SM2 failed to start. Flash missing, blocked or security error?');\n                alert('The status is ' + _this._soundObject.status.success + ', the error type is ' + _this._soundObject.status.error.type);\n            },\n            defaultOptions: {\n                // set global default volume for all sound objects\n                autoLoad: false,\n                // enable automatic loading (otherwise .load() will call with .play())\n                autoPlay: false,\n                // enable playing of file ASAP (much faster if \"stream\" is true)\n                from: null,\n                // position to start playback within a sound (msec), see demo\n                loops: 1,\n                // number of times to play the sound. Related: looping (API demo)\n                multiShot: false,\n                // let sounds \"restart\" or \"chorus\" when played multiple times..\n                multiShotEvents: false,\n                // allow events (onfinish()) to fire for each shot, if supported.\n                onid3: null,\n                // callback function for \"ID3 data is added/available\"\n                onload: null,\n                // callback function for \"load finished\"\n                onstop: null,\n                // callback for \"user stop\"\n                onfailure: 'nextTrack',\n                // callback function for when playing fails\n                onpause: null,\n                // callback for \"pause\"\n                onplay: null,\n                // callback for \"play\" start\n                onresume: null,\n                // callback for \"resume\" (pause toggle)\n                position: null,\n                // offset (milliseconds) to seek to within downloaded sound.\n                pan: 0,\n                // \"pan\" settings, left-to-right, -100 to 100\n                stream: true,\n                // allows playing before entire file has loaded (recommended)\n                to: null,\n                // position to end playback within a sound (msec), see demo\n                type: 'audio/mp3',\n                // MIME-like hint for canPlay() tests, eg. 'audio/mp3'\n                usePolicyFile: false,\n                // enable crossdomain.xml request for remote domains (for ID3/waveform access)\n                volume: this.volume,\n                // self-explanatory. 0-100, the latter being the max.\n                /**\n                         * SMSound (sound instance) object instance event handler\n                         * @note Event handlers are scoped to the relevant sound object,\n                         * so the this keyword will point to the sound object on which\n                         * the event fired such that its properties can easily be accessed\n                         */\n                whileloading: function () {\n                    soundManager._writeDebug('sound ' + this.id + ' loading, ' + this.bytesLoaded + ' of ' + this.bytesTotal);\n                    var /** @type {?} */ trackLoaded = ((this.bytesLoaded / this.bytesTotal) * 100);\n                    var /** @type {?} */ musicPlayerService = soundManager.parent;\n                    if (musicPlayerService) {\n                        musicPlayerService.musicPlayerEventEmitter.emit({\n                            event: MusicPlayerEventConstants.TRACK_LOADED,\n                            data: trackLoaded\n                        });\n                    }\n                },\n                /**\n                         * SMSound (sound instance) object instance event handler\n                         * @note Event handlers are scoped to the relevant sound object,\n                         * so the this keyword will point to the sound object on which\n                         * the event fired such that its properties can easily be accessed\n                         */\n                whileplaying: function () {\n                    soundManager._writeDebug('sound ' + this.id + ' playing, ' + this.position + ' of ' + this.duration);\n                    var /** @type {?} */ musicPlayerService = soundManager.parent;\n                    if (musicPlayerService) {\n                        // broadcast current playing track id\n                        musicPlayerService.currentTrack = this.id;\n                        try {\n                            musicPlayerService.trackProgress = ((this.position / this.duration) * 100);\n                            musicPlayerService.position = this.position;\n                            musicPlayerService.duration = this.duration;\n                        }\n                        catch (/** @type {?} */ error) {\n                            musicPlayerService.trackProgress = 0;\n                            musicPlayerService.position = 0;\n                            musicPlayerService.duration = 0;\n                        }\n                        var /** @type {?} */ trackEventData = {\n                            trackId: musicPlayerService.currentTrack,\n                            trackProgress: musicPlayerService.trackProgress,\n                            trackPosition: this.position,\n                            trackDuration: this.duration\n                        };\n                        musicPlayerService.musicPlayerTrackEventEmitter.emit({\n                            event: MusicPlayerEventConstants.TRACK_ID,\n                            data: trackEventData\n                        });\n                    }\n                },\n                /**\n                         * SMSound (sound instance) object instance event handler\n                         * @note Using ES6 and this refers to the Angular MusicPlayerService instances\n                         * instead of the SMSound object instance\n                         */\n                onfinish: function () {\n                    if (_this.autoPlay === true) {\n                        _this.nextTrack();\n                        var /** @type {?} */ trackEventData = {\n                            trackId: _this.currentTrack,\n                            trackProgress: _this.trackProgress,\n                            trackDuration: 0,\n                            trackPosition: 0\n                        };\n                        _this.musicPlayerTrackEventEmitter.emit({\n                            event: MusicPlayerEventConstants.TRACK_ID,\n                            data: trackEventData\n                        });\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    MusicPlayerService.prototype.setCurrentTrack = /**\n     * @param {?} key\n     * @return {?}\n     */\n    function (key) {\n        this.currentTrack = key;\n    };\n    /**\n     * @return {?}\n     */\n    MusicPlayerService.prototype.getCurrentTrack = /**\n     * @return {?}\n     */\n    function () {\n        return this.currentTrack;\n    };\n    /**\n     * @return {?}\n     */\n    MusicPlayerService.prototype.currentTrackData = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ trackId = this.getCurrentTrack();\n        var /** @type {?} */ currentKey = MusicPlayerUtils.IsInArray(this.playlist, trackId);\n        return this.playlist[currentKey];\n    };\n    /**\n     *\n     * @param key\n     */\n    /**\n     *\n     * @param {?=} key\n     * @return {?}\n     */\n    MusicPlayerService.prototype.getPlaylist = /**\n     *\n     * @param {?=} key\n     * @return {?}\n     */\n    function (key) {\n        if (typeof key === 'undefined') {\n            return this.playlist;\n        }\n        else {\n            return this.playlist[key];\n        }\n    };\n    /**\n     *\n     * @param track\n     */\n    /**\n     *\n     * @param {?} track\n     * @return {?}\n     */\n    MusicPlayerService.prototype.addToPlaylist = /**\n     *\n     * @param {?} track\n     * @return {?}\n     */\n    function (track) {\n        this.playlist.push(track);\n        // broadcast playlist\n        this.musicPlayerEventEmitter.emit({\n            event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n            data: this.playlist\n        });\n    };\n    /**\n     *\n     * @param track\n     */\n    /**\n     *\n     * @param {?} track\n     * @return {?}\n     */\n    MusicPlayerService.prototype.addTrack = /**\n     *\n     * @param {?} track\n     * @return {?}\n     */\n    function (track) {\n        // check if track itself is valid and if its url is playable\n        if (!MusicPlayerUtils.IsTrackValid) {\n            return null;\n        }\n        // check if song already does not exists then add to playlist\n        var /** @type {?} */ inArrayKey = MusicPlayerUtils.IsInArray(this.getPlaylist(undefined), track.id);\n        if (inArrayKey < 0) {\n            // console.warn('song does not exists in playlist:', track);\n            // add to sound manager\n            soundManager.createSound({\n                id: track.id,\n                url: track.url\n            });\n            // add to playlist\n            this.addToPlaylist(track);\n        }\n        return track.id;\n    };\n    /**\n     * @param {?} song\n     * @param {?} index\n     * @return {?}\n     */\n    MusicPlayerService.prototype.removeSong = /**\n     * @param {?} song\n     * @param {?} index\n     * @return {?}\n     */\n    function (song, index) {\n        // if this song is playing stop it\n        if (song === this.currentTrack) {\n            this.stop();\n        }\n        // unload from soundManager\n        soundManager.destroySound(song);\n        // remove from playlist\n        this.playlist.splice(index, 1);\n        // once all done then broadcast\n        this.musicPlayerEventEmitter.emit({\n            event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n            data: this.playlist\n        });\n    };\n    /**\n     *\n     * @param trackId\n     * @param isResume\n     */\n    /**\n     *\n     * @param {?} trackId\n     * @param {?} isResume\n     * @return {?}\n     */\n    MusicPlayerService.prototype.initPlayTrack = /**\n     *\n     * @param {?} trackId\n     * @param {?} isResume\n     * @return {?}\n     */\n    function (trackId, isResume) {\n        if (isResume !== true) {\n            // stop and unload currently playing track\n            this.stop();\n            // set new track as current track\n            this.setCurrentTrack(trackId);\n        }\n        // play it\n        soundManager.play(trackId);\n        var /** @type {?} */ trackEventData = {\n            trackId: this.currentTrack,\n            trackProgress: this.trackProgress,\n            trackDuration: this.duration,\n            trackPosition: 0\n        };\n        this.musicPlayerTrackEventEmitter.emit({\n            event: MusicPlayerEventConstants.TRACK_ID,\n            data: trackEventData\n        });\n        // set as playing\n        this.isPlaying = true;\n        this.musicPlayerEventEmitter.emit({\n            event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n            data: this.isPlaying\n        });\n    };\n    /**\n     * Plays currently selected track\n     * If the track is already playing, ignore event\n     */\n    /**\n     * Plays currently selected track\n     * If the track is already playing, ignore event\n     * @return {?}\n     */\n    MusicPlayerService.prototype.play = /**\n     * Plays currently selected track\n     * If the track is already playing, ignore event\n     * @return {?}\n     */\n    function () {\n        if (!this.isPlaying) {\n            var /** @type {?} */ trackToPlay = null;\n            // check if no track loaded, else play loaded track\n            if (this.getCurrentTrack() === null) {\n                if (soundManager.soundIDs.length === 0) {\n                    return;\n                }\n                trackToPlay = soundManager.soundIDs[0];\n                this.initPlayTrack(trackToPlay, false);\n            }\n            else {\n                trackToPlay = this.getCurrentTrack();\n                this.initPlayTrack(trackToPlay, true);\n            }\n        }\n    };\n    /**\n     * Toggles Pause state\n     */\n    /**\n     * Toggles Pause state\n     * @return {?}\n     */\n    MusicPlayerService.prototype.pause = /**\n     * Toggles Pause state\n     * @return {?}\n     */\n    function () {\n        this.isPlaying = !this.isPlaying;\n        if (this.isPlaying) {\n            soundManager.play(this.currentTrack);\n        }\n        else {\n            soundManager.pause(this.getCurrentTrack());\n        }\n        this.musicPlayerEventEmitter.emit({\n            event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n            data: this.isPlaying\n        });\n    };\n    /**\n     * Stops audio playback and clears playback status\n     */\n    /**\n     * Stops audio playback and clears playback status\n     * @return {?}\n     */\n    MusicPlayerService.prototype.stop = /**\n     * Stops audio playback and clears playback status\n     * @return {?}\n     */\n    function () {\n        // first pause it\n        soundManager.pause(this.getCurrentTrack());\n        this.isPlaying = false;\n        this.resetProgress();\n        var /** @type {?} */ trackEventData = {\n            trackId: this.currentTrack,\n            trackProgress: this.trackProgress,\n            trackDuration: 0,\n            trackPosition: 0\n        };\n        this.musicPlayerStopEventEmitter.emit({\n            event: MusicPlayerEventConstants.TRACK_STOP,\n            data: trackEventData\n        });\n        soundManager.stopAll();\n        soundManager.unload(this.getCurrentTrack());\n    };\n    /**\n     * Plays selected track\n     * @param trackId\n     */\n    /**\n     * Plays selected track\n     * @param {?} trackId\n     * @return {?}\n     */\n    MusicPlayerService.prototype.playTrack = /**\n     * Plays selected track\n     * @param {?} trackId\n     * @return {?}\n     */\n    function (trackId) {\n        this.initPlayTrack(trackId, false);\n    };\n    /**\n     *\n     */\n    /**\n     *\n     * @return {?}\n     */\n    MusicPlayerService.prototype.nextTrack = /**\n     *\n     * @return {?}\n     */\n    function () {\n        if (this.getCurrentTrack() === null) {\n            console.log('Please click on Play before this action');\n            return null;\n        }\n        var /** @type {?} */ currentTrackKey = MusicPlayerUtils.GetIndexByValue(soundManager.soundIDs, this.getCurrentTrack());\n        var /** @type {?} */ nextTrackKey = +currentTrackKey + 1;\n        var /** @type {?} */ nextTrack = soundManager.soundIDs[nextTrackKey];\n        if (typeof nextTrack !== 'undefined') {\n            this.playTrack(nextTrack);\n        }\n        else {\n            // if no next track found\n            if (this.repeat === true) {\n                // start first track if repeat is on\n                this.playTrack(soundManager.soundIDs[0]);\n            }\n            else {\n                // breadcase not playing anything\n                this.isPlaying = false;\n                this.musicPlayerEventEmitter.emit({\n                    event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n                    data: this.isPlaying\n                });\n            }\n        }\n    };\n    /**\n     *\n     */\n    /**\n     *\n     * @return {?}\n     */\n    MusicPlayerService.prototype.prevTrack = /**\n     *\n     * @return {?}\n     */\n    function () {\n        if (this.getCurrentTrack() === null) {\n            console.log('Please click on Play before this action');\n            return null;\n        }\n        var /** @type {?} */ currentTrackKey = MusicPlayerUtils.GetIndexByValue(soundManager.soundIDs, this.getCurrentTrack());\n        var /** @type {?} */ prevTrackKey = +currentTrackKey - 1;\n        var /** @type {?} */ prevTrack = soundManager.soundIDs[prevTrackKey];\n        if (typeof prevTrack !== 'undefined') {\n            this.playTrack(prevTrack);\n        }\n        else {\n            console.warn('no prev track found!');\n        }\n    };\n    /**\n     *  Mute/Unmute audio\n     */\n    /**\n     *  Mute/Unmute audio\n     * @return {?}\n     */\n    MusicPlayerService.prototype.mute = /**\n     *  Mute/Unmute audio\n     * @return {?}\n     */\n    function () {\n        if (soundManager.muted === true) {\n            soundManager.unmute();\n        }\n        else {\n            soundManager.mute();\n        }\n        this.musicPlayerMuteEventEmitter.emit({\n            event: MusicPlayerEventConstants.MUSIC_MUTE,\n            data: soundManager.muted\n        });\n    };\n    /**\n     * Mute Accessor\n     */\n    /**\n     * Mute Accessor\n     * @return {?}\n     */\n    MusicPlayerService.prototype.getMuteStatus = /**\n     * Mute Accessor\n     * @return {?}\n     */\n    function () {\n        return soundManager.muted;\n    };\n    /**\n     *\n     */\n    /**\n     *\n     * @return {?}\n     */\n    MusicPlayerService.prototype.repeatToggle = /**\n     *\n     * @return {?}\n     */\n    function () {\n        if (this.repeat === true) {\n            this.repeat = false;\n        }\n        else {\n            this.repeat = true;\n        }\n        this.musicPlayerRepeatEventEmitter.emit({\n            event: MusicPlayerEventConstants.MUSIC_REPEAT,\n            data: this.repeat\n        });\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    MusicPlayerService.prototype.getRepeatStatus = /**\n     * @return {?}\n     */\n    function () {\n        return this.repeat;\n    };\n    /**\n     * @return {?}\n     */\n    MusicPlayerService.prototype.getVolume = /**\n     * @return {?}\n     */\n    function () {\n        return this.volume;\n    };\n    /**\n     *\n     * @param increase\n     */\n    /**\n     *\n     * @param {?} increase\n     * @return {?}\n     */\n    MusicPlayerService.prototype.adjustVolume = /**\n     *\n     * @param {?} increase\n     * @return {?}\n     */\n    function (increase) {\n        var _this = this;\n        var /** @type {?} */ changeVolume = function (volume) {\n            for (var /** @type {?} */ i = 0; i < soundManager.soundIDs.length; i++) {\n                var /** @type {?} */ mySound = soundManager.getSoundById(soundManager.soundIDs[i]);\n                mySound.setVolume(volume);\n            }\n            _this.musicPlayerVolumeEventEmitter.emit({\n                event: MusicPlayerEventConstants.MUSIC_VOLUME,\n                data: volume\n            });\n        };\n        if (increase === true) {\n            if (this.volume < 100) {\n                this.volume = this.volume + 10;\n                changeVolume(this.volume);\n            }\n        }\n        else {\n            if (this.volume > 0) {\n                this.volume = this.volume - 10;\n                changeVolume(this.volume);\n            }\n        }\n    };\n    /**\n     *\n     * @param value\n     */\n    /**\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    MusicPlayerService.prototype.adjustVolumeSlider = /**\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        var /** @type {?} */ changeVolume = function (volume) {\n            for (var /** @type {?} */ i = 0; i < soundManager.soundIDs.length; i++) {\n                var /** @type {?} */ mySound = soundManager.getSoundById(soundManager.soundIDs[i]);\n                mySound.setVolume(volume);\n            }\n            _this.musicPlayerVolumeEventEmitter.emit({\n                event: MusicPlayerEventConstants.MUSIC_VOLUME,\n                data: volume\n            });\n        };\n        changeVolume(value);\n    };\n    /**\n     *\n     * @param callback\n     */\n    /**\n     *\n     * @param {?=} callback\n     * @return {?}\n     */\n    MusicPlayerService.prototype.clearPlaylist = /**\n     *\n     * @param {?=} callback\n     * @return {?}\n     */\n    function (callback) {\n        var _this = this;\n        this.isPlaying = false;\n        this.currentTrack = null;\n        this.resetProgress();\n        // unload and destroy soundmanager sounds\n        var /** @type {?} */ smIdsLength = soundManager.soundIDs.length;\n        MusicPlayerUtils.AsyncLoop({\n            length: smIdsLength,\n            functionToLoop: function (loop /*, i: number*/) {\n                setTimeout(function () {\n                    // custom code\n                    soundManager.destroySound(soundManager.soundIDs[0]);\n                    // custom code\n                    loop();\n                }, 0);\n            },\n            callback: function () {\n                // callback custom code\n                // clear playlist\n                // callback custom code\n                // clear playlist\n                _this.playlist = [];\n                _this.musicPlayerEventEmitter.emit({\n                    event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n                    data: _this.playlist\n                });\n                if (callback) {\n                    // callback custom code\n                    callback(true);\n                }\n            }\n        });\n    };\n    /**\n     *\n     */\n    /**\n     *\n     * @return {?}\n     */\n    MusicPlayerService.prototype.resetProgress = /**\n     *\n     * @return {?}\n     */\n    function () {\n        this.trackProgress = 0;\n    };\n    /**\n     * @return {?}\n     */\n    MusicPlayerService.prototype.isPlayingStatus = /**\n     * @return {?}\n     */\n    function () {\n        return this.isPlaying;\n    };\n    MusicPlayerService.decorators = [\n        { type: Injectable }\n    ];\n    /** @nocollapse */\n    MusicPlayerService.ctorParameters = function () { return [\n        { type: Object, decorators: [{ type: Inject, args: ['setupOptions',] }, { type: Optional },] },\n    ]; };\n    return MusicPlayerService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ClearPlaylistDirective = /** @class */ (function () {\n    function ClearPlaylistDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n    }\n    /**\n     * @return {?}\n     */\n    ClearPlaylistDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        this._musicPlayerService.stop();\n        this._musicPlayerService.setCurrentTrack(null);\n        this._musicPlayerService.clearPlaylist();\n    };\n    ClearPlaylistDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[clearPlaylist]'\n                },] }\n    ];\n    /** @nocollapse */\n    ClearPlaylistDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    ClearPlaylistDirective.propDecorators = {\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return ClearPlaylistDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DecreaseVolumeDirective = /** @class */ (function () {\n    function DecreaseVolumeDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n    }\n    /**\n     * @return {?}\n     */\n    DecreaseVolumeDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        this._musicPlayerService.adjustVolume(false);\n    };\n    DecreaseVolumeDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[decreaseVolume]'\n                },] }\n    ];\n    /** @nocollapse */\n    DecreaseVolumeDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    DecreaseVolumeDirective.propDecorators = {\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return DecreaseVolumeDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar IncreaseVolumeDirective = /** @class */ (function () {\n    function IncreaseVolumeDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n    }\n    /**\n     * @return {?}\n     */\n    IncreaseVolumeDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        this._musicPlayerService.adjustVolume(true);\n    };\n    IncreaseVolumeDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[increaseVolume]'\n                },] }\n    ];\n    /** @nocollapse */\n    IncreaseVolumeDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    IncreaseVolumeDirective.propDecorators = {\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return IncreaseVolumeDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MusicPlayerDirective = /** @class */ (function () {\n    function MusicPlayerDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n    }\n    /**\n     * @return {?}\n     */\n    MusicPlayerDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ trackId;\n        if (this.song) {\n            trackId = this._musicPlayerService.addTrack(this.song);\n            if (this.musicPlayer === 'play') {\n                this._musicPlayerService.playTrack(trackId);\n            }\n        }\n    };\n    MusicPlayerDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[musicPlayer]'\n                },] }\n    ];\n    /** @nocollapse */\n    MusicPlayerDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    MusicPlayerDirective.propDecorators = {\n        \"musicPlayer\": [{ type: Input },],\n        \"song\": [{ type: Input },],\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return MusicPlayerDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MuteMusicDirective = /** @class */ (function () {\n    function MuteMusicDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n    }\n    /**\n     * @return {?}\n     */\n    MuteMusicDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        this._musicPlayerService.mute();\n    };\n    MuteMusicDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[muteMusic]'\n                },] }\n    ];\n    /** @nocollapse */\n    MuteMusicDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    MuteMusicDirective.propDecorators = {\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return MuteMusicDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NextTrackDirective = /** @class */ (function () {\n    function NextTrackDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n    }\n    /**\n     * @return {?}\n     */\n    NextTrackDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        this._musicPlayerService.nextTrack();\n    };\n    NextTrackDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[nextTrack]'\n                },] }\n    ];\n    /** @nocollapse */\n    NextTrackDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    NextTrackDirective.propDecorators = {\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return NextTrackDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar PauseMusicDirective = /** @class */ (function () {\n    function PauseMusicDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n    }\n    /**\n     * @return {?}\n     */\n    PauseMusicDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        this._musicPlayerService.pause();\n    };\n    PauseMusicDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[pauseMusic]'\n                },] }\n    ];\n    /** @nocollapse */\n    PauseMusicDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    PauseMusicDirective.propDecorators = {\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return PauseMusicDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar PlayAllDirective = /** @class */ (function () {\n    function PlayAllDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n        this.play = true;\n    }\n    /**\n     * @return {?}\n     */\n    PlayAllDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._musicPlayerService.clearPlaylist(function () {\n            for (var /** @type {?} */ i = 0; i < _this.songs.length; i++) {\n                _this._musicPlayerService.addTrack(_this.songs[i]);\n            }\n            if (_this.play) {\n                // play first song\n                // play first song\n                _this._musicPlayerService.play();\n            }\n        });\n    };\n    PlayAllDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[playAll]'\n                },] }\n    ];\n    /** @nocollapse */\n    PlayAllDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    PlayAllDirective.propDecorators = {\n        \"songs\": [{ type: Input },],\n        \"play\": [{ type: Input },],\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return PlayAllDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar PlayFromPlaylistDirective = /** @class */ (function () {\n    function PlayFromPlaylistDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n    }\n    /**\n     * @return {?}\n     */\n    PlayFromPlaylistDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        this._musicPlayerService.playTrack(this.song.id);\n    };\n    PlayFromPlaylistDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[playFromPlaylist]'\n                },] }\n    ];\n    /** @nocollapse */\n    PlayFromPlaylistDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    PlayFromPlaylistDirective.propDecorators = {\n        \"song\": [{ type: Input },],\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return PlayFromPlaylistDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar PlayMusicDirective = /** @class */ (function () {\n    function PlayMusicDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n    }\n    /**\n     * @return {?}\n     */\n    PlayMusicDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        this._musicPlayerService.play();\n    };\n    PlayMusicDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[playMusic]'\n                },] }\n    ];\n    /** @nocollapse */\n    PlayMusicDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    PlayMusicDirective.propDecorators = {\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return PlayMusicDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar PreviousTrackDirective = /** @class */ (function () {\n    function PreviousTrackDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n    }\n    /**\n     * @return {?}\n     */\n    PreviousTrackDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        this._musicPlayerService.prevTrack();\n    };\n    PreviousTrackDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[previousTrack]'\n                },] }\n    ];\n    /** @nocollapse */\n    PreviousTrackDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    PreviousTrackDirective.propDecorators = {\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return PreviousTrackDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar RemoveFromPlaylistDirective = /** @class */ (function () {\n    function RemoveFromPlaylistDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n    }\n    /**\n     * @return {?}\n     */\n    RemoveFromPlaylistDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        console.log('remove:', this.index);\n        this._musicPlayerService.removeSong(this.song.id, this.index);\n    };\n    RemoveFromPlaylistDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[removeFromPlaylist]'\n                },] }\n    ];\n    /** @nocollapse */\n    RemoveFromPlaylistDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    RemoveFromPlaylistDirective.propDecorators = {\n        \"song\": [{ type: Input },],\n        \"index\": [{ type: Input },],\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return RemoveFromPlaylistDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar RepeatMusicDirective = /** @class */ (function () {\n    function RepeatMusicDirective(_musicPlayerService, _element) {\n        this._musicPlayerService = _musicPlayerService;\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    RepeatMusicDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.repeat = this._musicPlayerService.getRepeatStatus();\n        this.highlight();\n        // Subscribe for repeat changes to update bindings\n        this._musicPlayerRepeatSubscription = this._musicPlayerService.musicPlayerRepeatEventEmitter\n            .subscribe(function (event) {\n            _this.repeat = event.data;\n            _this.highlight();\n        });\n    };\n    /**\n     * @return {?}\n     */\n    RepeatMusicDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._musicPlayerRepeatSubscription.unsubscribe();\n    };\n    /**\n     * Element click event handler\n     * @return {?}\n     */\n    RepeatMusicDirective.prototype.onClick = /**\n     * Element click event handler\n     * @return {?}\n     */\n    function () {\n        this._musicPlayerService.repeatToggle();\n    };\n    /**\n     * Change background color of element based on repeat state\n     * @return {?}\n     */\n    RepeatMusicDirective.prototype.highlight = /**\n     * Change background color of element based on repeat state\n     * @return {?}\n     */\n    function () {\n        this._element.nativeElement.style.backgroundColor = this.repeat ? 'green' : 'red';\n    };\n    RepeatMusicDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[repeatMusic]'\n                },] }\n    ];\n    /** @nocollapse */\n    RepeatMusicDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n        { type: ElementRef, },\n    ]; };\n    RepeatMusicDirective.propDecorators = {\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return RepeatMusicDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar StopMusicDirective = /** @class */ (function () {\n    function StopMusicDirective(_musicPlayerService) {\n        this._musicPlayerService = _musicPlayerService;\n    }\n    /**\n     * @return {?}\n     */\n    StopMusicDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        this._musicPlayerService.stop();\n    };\n    StopMusicDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[stopMusic]'\n                },] }\n    ];\n    /** @nocollapse */\n    StopMusicDirective.ctorParameters = function () { return [\n        { type: MusicPlayerService, },\n    ]; };\n    StopMusicDirective.propDecorators = {\n        \"onClick\": [{ type: HostListener, args: ['click', ['$event'],] },],\n    };\n    return StopMusicDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar HumanTimePipe = /** @class */ (function () {\n    function HumanTimePipe() {\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HumanTimePipe.prototype.transform = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ min = (value / 1000 / 60) << 0;\n        var /** @type {?} */ sec = Math.round((value / 1000) % 60);\n        return this.pad(min) + ':' + this.pad(sec);\n    };\n    /**\n     * Pads string with zeros if less than 10\n     * @param {?} d\n     * @return {?}\n     */\n    HumanTimePipe.prototype.pad = /**\n     * Pads string with zeros if less than 10\n     * @param {?} d\n     * @return {?}\n     */\n    function (d) {\n        return (d < 10) ? '0' + d.toString() : d.toString();\n    };\n    HumanTimePipe.decorators = [\n        { type: Pipe, args: [{ name: 'humanTime' },] }\n    ];\n    return HumanTimePipe;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSoundmanager2Module = /** @class */ (function () {\n    function NgxSoundmanager2Module() {\n    }\n    /**\n     * @param {?=} setupOptions\n     * @return {?}\n     */\n    NgxSoundmanager2Module.forRoot = /**\n     * @param {?=} setupOptions\n     * @return {?}\n     */\n    function (setupOptions) {\n        return {\n            ngModule: NgxSoundmanager2Module,\n            providers: [\n                MusicPlayerService,\n                { provide: 'setupOptions', useValue: setupOptions }\n            ]\n        };\n    };\n    NgxSoundmanager2Module.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        ClearPlaylistDirective,\n                        DecreaseVolumeDirective,\n                        IncreaseVolumeDirective,\n                        MusicPlayerDirective,\n                        MuteMusicDirective,\n                        NextTrackDirective,\n                        PauseMusicDirective,\n                        PlayAllDirective,\n                        PlayFromPlaylistDirective,\n                        PlayMusicDirective,\n                        PreviousTrackDirective,\n                        RemoveFromPlaylistDirective,\n                        RepeatMusicDirective,\n                        StopMusicDirective,\n                        HumanTimePipe\n                    ],\n                    exports: [\n                        ClearPlaylistDirective,\n                        DecreaseVolumeDirective,\n                        IncreaseVolumeDirective,\n                        MusicPlayerDirective,\n                        MuteMusicDirective,\n                        NextTrackDirective,\n                        PauseMusicDirective,\n                        PlayAllDirective,\n                        PlayFromPlaylistDirective,\n                        PlayMusicDirective,\n                        PreviousTrackDirective,\n                        RemoveFromPlaylistDirective,\n                        RepeatMusicDirective,\n                        StopMusicDirective,\n                        HumanTimePipe\n                    ]\n                },] }\n    ];\n    /** @nocollapse */\n    NgxSoundmanager2Module.ctorParameters = function () { return []; };\n    return NgxSoundmanager2Module;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MusicPlayerEventConstants, ClearPlaylistDirective, DecreaseVolumeDirective, IncreaseVolumeDirective, MusicPlayerDirective, MuteMusicDirective, NextTrackDirective, PauseMusicDirective, PlayAllDirective, PlayFromPlaylistDirective, PlayMusicDirective, PreviousTrackDirective, RemoveFromPlaylistDirective, RepeatMusicDirective, StopMusicDirective, NgxSoundmanager2Module, HumanTimePipe, MusicPlayerService };\n//# sourceMappingURL=ngx-soundmanager2.js.map\n","module.exports = \"\\n.sub-title {\\n  margin-left: 20px;\\n}\\n\\n.fill-space {\\n  flex: 1 1 auto;\\n}\\n\\n.button-row {\\n  justify-content: space-around;\\n  margin-bottom: 5px;\\n}\\n\\n.songs {\\n  margin-left: -200px;\\n}\\n\\n.song-title-btn {\\n  text-align: right;\\n  width: 300px;\\n}\\n\\n.play-btns {\\n  margin-top: 20px;\\n}\\n\\n.playlist-title {\\n  margin-top: 20px;\\n}\\n\\n.playlist {\\n  padding-bottom: 30px;\\n}\\n\"","module.exports = \"<div class=\\\"main-content\\\">\\n  <div class=\\\"container-fluid\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <div class=\\\"card\\\">\\n          <div class=\\\"card-header card-header-icon card-header-rose\\\">\\n            <div class=\\\"card-icon\\\">\\n              <i class=\\\"material-icons\\\">info</i>\\n            </div>\\n            <h4 class=\\\"card-title\\\">Podcast Details\\n            </h4>\\n          </div>\\n          <div class=\\\"card-body\\\">\\n            <form>\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-md-4\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <img class=\\\"card-img-top\\\" src={{srcValue}} alt=\\\"Card image cap\\\">\\n                  </div>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <label class=\\\"bmd-label-floating\\\">Title:&nbsp;&nbsp;</label>\\n                    <label class=\\\"bmd-label-floating\\\">{{podcastName}}</label><br />\\n                    <label class=\\\"bmd-label-floating\\\">Artist Name:&nbsp;&nbsp; </label>\\n                    <label class=\\\"bmd-label-floating\\\">{{artistName}}</label><br />\\n                    <label class=\\\"bmd-label-floating\\\">Tags:&nbsp;&nbsp; </label>\\n                    <label class=\\\"bmd-label-floating\\\">{{Tag}}</label><br />\\n                    <label class=\\\"bmd-label-floating\\\" *ngIf=\\\"isPaid\\\">{{podcastCost}}</label><br />\\n                    <div class=\\\"row\\\">\\n                      <div class=\\\"col-md-2\\\" style=\\\"text-align:right\\\">\\n                        {{ currentTrackPostion | humanTime }}\\n                      </div>\\n                      <div class=\\\"progress col-md-6\\\" style=\\\"height: 5px; width: 100%; margin-top: 10px;\\\">\\n                        <div class=\\\"progress-bar progress-bar-success\\\" role=\\\"progressbar\\\" [ngStyle]=\\\"{width : progress }\\\">\\n                          <span class=\\\"sr-only\\\"></span>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"col-md-2\\\">\\n                        {{ currentTrackDuration | humanTime }}\\n                      </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                      <div *ngFor=\\\"let song of songs\\\" class=\\\"songs\\\">\\n                        <div class=\\\"button-row\\\">\\n                          <button mat-button color=\\\"primary\\\" class=\\\"song-title-btn\\\" [musicPlayer]=\\\"'play'\\\" [song]=\\\"song\\\">\\n                            <i class=\\\"fa fa-play\\\" aria-hidden=\\\"true\\\"></i>\\n                          </button>\\n                          <button mat-button color=\\\"accent\\\" pauseMusic>\\n                            <i class=\\\"fa fa-pause\\\" aria-hidden=\\\"true\\\"></i>\\n                          </button>\\n                          <button mat-button color=\\\"warn\\\" stopMusic>\\n                            <i class=\\\"fa fa-stop\\\" aria-hidden=\\\"true\\\"></i>\\n                          </button>\\n                        </div>\\n                      </div>\\n                    </div>\\n                  </div>\\n                </div>\\n                <div class=\\\"col-md-12\\\" style=\\\"margin-top: 50px;\\\">\\n                    <mat-form-field>\\n                        <textarea matInput placeholder=\\\"Enter Comments\\\"></textarea></mat-form-field>\\n                        <div class=\\\"card-footer text-right\\\">\\n                            <div class=\\\"form-check mr-auto\\\"></div>\\n                            <button mat-raised-button type=\\\"submit\\\" class=\\\"btn btn-rose\\\" (click)=\\\"postComment()\\\">Comment</button>\\n                            <button mat-raised-button type=\\\"submit\\\" class=\\\"btn btn-rose\\\" (click)=\\\"clearComment()\\\">Cancel</button>\\n                        </div>\\n                    <div *ngFor=\\\"let comment of comments\\\">\\n                        \\n                            <label class=\\\"bmd-label-floating\\\">{{comment.whoCommented}},&nbsp;&nbsp;</label>\\n                            <label class=\\\"bmd-label-floating\\\">{{comment.whenCommented}}&nbsp;&nbsp;</label>\\n                        \\n                          <mat-form-field>\\n                              <input [disabled]=\\\"true\\\" type=\\\"text\\\" matInput value=\\\"{{comment.commentsDescription}}\\\"></mat-form-field>\\n                        \\n                      </div>\\n                </div>\\n              </div>\\n              <div class=\\\"clearfix\\\"></div>\\n            </form>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\\n\\n\\n\\n<!--<div class=\\\"main-content\\\">\\n    <div class=\\\"container-fluid\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12\\\">\\n                <div class=\\\"card\\\">\\n                  <div style=\\\"width: 20rem;\\\">\\n                    <img class=\\\"card-img-top\\\" src=\\\"https://images.unsplash.com/photo-1517303650219-83c8b1788c4c?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=bd4c162d27ea317ff8c67255e955e3c8&auto=format&fit=crop&w=2691&q=80\\\" alt=\\\"Card image cap\\\">\\n                    <div class=\\\"card-body\\\">\\n                      \\n                      <div class=\\\"button-row\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" playMusic>\\n                          <i class=\\\"fa fa-play\\\" aria-hidden=\\\"true\\\"></i>\\n                        </button>\\n                        <button mat-raised-button color=\\\"accent\\\" pauseMusic>\\n                          <i class=\\\"fa fa-pause\\\" aria-hidden=\\\"true\\\"></i>\\n                        </button>\\n                        <button mat-raised-button color=\\\"warn\\\" stopMusic>\\n                          <i class=\\\"fa fa-stop\\\" aria-hidden=\\\"true\\\"></i>\\n                        </button>\\n                        <button mat-raised-button repeatMusic>Repeat</button>\\n                      </div>\\n                  \\n                      <h5 class=\\\"mat-body\\\">Volume: {{ volume }}</h5>\\n                  \\n                      <div class=\\\"button-row\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" increaseVolume>+</button>\\n                        <button mat-raised-button color=\\\"accent\\\" decreaseVolume>-</button>\\n                        <button mat-raised-button muteMusic>Mute ({{ mute }})</button>\\n                      </div>\\n                  \\n                      <div class=\\\"button-row\\\">\\n                        <button mat-icon-button color=\\\"primary\\\" previousTrack>\\n                          <i class=\\\"fa fa-step-backward\\\" aria-hidden=\\\"true\\\"></i>\\n                        </button>\\n                        <button mat-icon-button color=\\\"primary\\\" nextTrack>\\n                          <i class=\\\"fa fa-step-forward\\\" aria-hidden=\\\"true\\\"></i>\\n                        </button>\\n                        <button mat-raised-button color=\\\"primary\\\" clearPlaylist>Clear Playlist</button>\\n                      </div>\\n                  \\n                      <h5 class=\\\"mat-title playlist-title\\\">Playlist:</h5>\\n                  \\n                      <div class=\\\"playlist\\\">\\n                        <div *ngFor=\\\"let song of playlist; index as i;\\\">\\n                          <a playFromPlaylist [song]=\\\"song\\\">{{ song.title }}</a>\\n                          <a removeFromPlaylist [song]=\\\"song\\\" [index]=\\\"i\\\">\\n                            <small>(remove)</small>\\n                          </a>\\n                          <span *ngIf=\\\"currentPlaying && currentPlaying.id == song.id\\\"> - (current)</span>\\n                        </div>\\n                      </div>\\n                    </div>\\n                    </div>\\n                  </div>\\n                  <div>\\n                    <div class=\\\"progress\\\" style=\\\"height: 2px; width: 100%;\\\">\\n                      <div class=\\\"progress-bar progress-bar-success\\\"\\n                           role=\\\"progressbar\\\"\\n                           [ngStyle]=\\\"{width : progress }\\\">\\n                        <span class=\\\"sr-only\\\"></span>\\n                      </div>\\n                    </div>\\n                    \\n                    <p *ngIf=\\\"currentPlaying\\\" class=\\\"mat-body\\\">\\n                      Currently Playing: {{ currentPlaying.title }} by {{ currentPlaying.artist }} ({{ currentTrackPostion | humanTime }} / {{ currentTrackDuration | humanTime }})\\n                    </p>\\n                \\n                    \\n                  \\n  \\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n  </div>\\n  \\n  <div style=\\\"text-align:center; margin: 8px;\\\">\\n    <h1 class=\\\"mat-h1\\\">\\n      Welcome to {{ title }}!\\n    </h1>\\n  \\n    <div>\\n      <h5 class=\\\"mat-title\\\">Songs</h5>\\n      <div *ngFor=\\\"let song of songs\\\" class=\\\"songs\\\">\\n        <div class=\\\"button-row\\\">\\n          <button mat-button color=\\\"primary\\\" class=\\\"song-title-btn\\\" [musicPlayer]=\\\"'play'\\\" [song]=\\\"song\\\">\\n            {{ song.title }}\\n          </button>\\n          <button mat-mini-fab color=\\\"accent\\\" musicPlayer [song]=\\\"song\\\">+</button>\\n        </div>\\n      </div>\\n  \\n      <div class=\\\"button-row play-btns\\\">\\n        <button mat-raised-button color=\\\"primary\\\" playAll [songs]=\\\"songs\\\">Play all</button>\\n        <button mat-raised-button color=\\\"accent\\\" playAll [songs]=\\\"songs\\\" [play]=\\\"false\\\">Add all</button>\\n      </div>\\n    </div>\\n  \\n    <hr /> \\n  \\n    \\n  </div>\\n  \\n  \\n-->\"","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MusicPlayerService } from 'ngx-soundmanager2';\n\n@Component({\n  selector: 'app-songDetails-cmp',\n  templateUrl: './songDetails.component.html',\n  styleUrls: ['./songDetails.component.css']\n})\nexport class SongDetailsComponent implements OnInit, OnDestroy {\n  title = 'the ngx-soundmanager2 demo';\n\n  songs = [\n    {\n      id: 'one',\n      title: 'Kick It',\n      artist: 'Raised On Zenith',\n      url: 'https://popplers5.bandcamp.com/download/track?enc=mp3-128&fsig=10442536bc89f9881e8da2eb81ecd5fb&id=120877506&stream=1&ts=1502502685.0'\n    }/*,\n    {\n      id: 'two',\n      title: 'How Long',\n      artist: 'Raised On Zenith',\n      url: 'https://popplers5.bandcamp.com/download/track?enc=mp3-128&fsig=468f1ed20aae2aba824fb4e6923ff850&id=470307233&stream=1&ts=1502595994.0'\n    },\n    {\n      id: 'three',\n      title: 'Details and Structures',\n      artist: 'Air This Side of Caution',\n      url: 'http://lukefarran.com/music/AirThisSideOfCaution/NatureWillTurnOnUs/02_Details%26Structures.mp3'\n    },\n    {\n      id: 'four',\n      title: 'Here We Go',\n      artist: 'Air This Side of Caution',\n      url: 'http://lukefarran.com/music/AirThisSideOfCaution/NatureWillTurnOnUs/03_HereWeGo.mp3'\n    },\n    {\n      id: 'five',\n      title: 'Without You',\n      artist: 'The Assembly',\n      url: 'http://lukefarran.com/music/TheAssembly/TheFutureHasBeenSold_LukeMaster/07_WithoutYou.mp3'\n    }*/\n  ];\n\n  comments = [\n    {\n      whoCommented: 'xyz',\n      whenCommented: '10/08/2018',\n      commentsDescription:'I really liked this podcast'\n    },\n    {\n      whoCommented: 'abc',\n      whenCommented: '10/08/2018',\n      commentsDescription:'I did not like this podcast'\n    },\n  ];\n\n  mute: boolean;\n\n  currentPlaying: any;\n  srcValue: any;\n  currentTrackPostion: number;\n  currentTrackDuration: number;\n  currentTrackProgress: number;\n  volume: number;\n\n  // subscriptions\n  private _musicPlayerMuteSubscription: any;\n  private _musicPlayerTrackIdSubscription: any;\n  private _musicPlayerVolumeSubscription: any;\n\n  // \n  podcastName = \"Kick It\";\n  artistName = \"Raised On Zenith\";\n  Tag = \"Kick, It\";\n  podcastCost = \"\";\n  isPaid = false;\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  ngOnInit() {\n    this.srcValue = \"https://images.unsplash.com/photo-1517303650219-83c8b1788c4c?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=bd4c162d27ea317ff8c67255e955e3c8&auto=format&fit=crop&w=2691&q=80\"\n    // Subscribe for mute changes to update bindings\n    this.mute = this._musicPlayerService.getMuteStatus();\n    this._musicPlayerMuteSubscription = this._musicPlayerService.musicPlayerMuteEventEmitter\n      .subscribe((event: any) => {\n        this.mute = event.data;\n      });\n\n    // Subscribe for track changes\n    this.currentPlaying = this._musicPlayerService.currentTrackData();\n    \n    this._musicPlayerTrackIdSubscription = this._musicPlayerService.musicPlayerTrackEventEmitter\n      .subscribe((event: any) => {    \n        this.currentPlaying = this._musicPlayerService.currentTrackData();\n        this.currentTrackPostion = event.data.trackPosition;\n        this.currentTrackDuration = event.data.trackDuration;\n        this.currentTrackProgress = event.data.trackProgress;\n      });\n\n    // subscribe for volume changes\n    this.volume = this._musicPlayerService.getVolume();\n    this._musicPlayerVolumeSubscription = this._musicPlayerService.musicPlayerVolumeEventEmitter\n      .subscribe((event: any) => {\n        this.volume = event.data;\n      });\n  }\n\n  ngOnDestroy() {\n    this._musicPlayerMuteSubscription.unsubscribe();\n    this._musicPlayerTrackIdSubscription.unsubscribe();\n    this._musicPlayerVolumeSubscription.unsubscribe();\n  }\n\n  get progress(): string {\n    return this.currentTrackProgress ? (this.currentTrackProgress.toString() + '%') : '0%';\n  }\n\n  get playlist(): any {\n    return this._musicPlayerService.getPlaylist();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n// import { FlexLayoutModule } from '@angular/flex-layout';\nimport { MaterialModule } from '../app.module';\nimport { SongDetailsComponent } from './songDetails.component';\nimport { SongDetailsRoutes } from './songDetails.routing';\n\nimport { NgxSoundmanager2Module } from 'ngx-soundmanager2';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgxSoundmanager2Module.forRoot(),\n    RouterModule.forChild(SongDetailsRoutes),\n    FormsModule,\n    MaterialModule,\n    ReactiveFormsModule\n  ],\n  declarations: [SongDetailsComponent]\n})\nexport class SongDetailsModule { }","import { Routes } from '@angular/router';\r\n\r\nimport { SongDetailsComponent } from './songDetails.component';\r\n\r\nexport const SongDetailsRoutes: Routes = [\r\n    {\r\n\r\n      path: '',\r\n      children: [ {\r\n        path: 'tables/latestPodcast/:id',\r\n        component: SongDetailsComponent\r\n    }]\r\n}\r\n];"],"sourceRoot":""}