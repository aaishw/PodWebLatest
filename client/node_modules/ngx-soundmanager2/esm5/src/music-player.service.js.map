{"version":3,"file":"music-player.service.js","sourceRoot":"","sources":["../../src/music-player.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, EventEmitter, Optional } from '@angular/core';\nimport { MusicPlayerEventConstants } from './music-player-events.constants';\nimport { ITrackEvent } from './itrack-event.interface';\nimport { MusicPlayerUtils } from './music-player.utils';\n\ndeclare const soundManager: any;\n\n@Injectable()\nexport class MusicPlayerService {\n\n  currentTrack: string = null;\n\n  repeat = false;\n  autoPlay = true;\n  isPlaying = false;\n\n  trackProgress = 0;\n  volume = 90;\n  position: number;\n  duration: number;\n\n  playlist: Array<any> = [];\n\n  public musicPlayerEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerMuteEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerRepeatEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerStopEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerTrackEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerVolumeEventEmitter: EventEmitter<any> = new EventEmitter();\n\n  private _soundObject: any;\n\n  constructor(\n    @Inject('setupOptions') @Optional() public setupOptions?: Object,\n  ) {\n    this.init(setupOptions);\n  }\n\n  /**\n   * Initialize soundmanager,\n   * requires soundmanager2 to be loaded first\n   */\n  init(setupOptions?: Object): void {\n    if (typeof soundManager === 'undefined') {\n      alert('Please include SoundManager2 Library!');\n    }\n    Object.assign(soundManager.setupOptions, setupOptions);\n    soundManager.setupOptions.ignoreMobileRestrictions = true;\n    this._soundObject = soundManager.setup({\n      preferFlash: false, // prefer 100% HTML5 mode, where both supported\n      debugMode: false,   // enable debugging output\n      useHTML5Audio: true, // http://www.schillmania.com/projects/soundmanager2/doc/#soundmanager-usehtml5audio\n      /**\n       * @reference http://www.schillmania.com/projects/soundmanager2/doc/#sm-config\n       * @description onready Events (Callbacks)\n       * Queues an event callback/handler for successful initialization and \"ready to use\" state of SoundManager 2.\n       * An optional scope parameter can be specified; if none, the callback is scoped to the window.\n       * If onready() is called after successful initialization, the callback will be executed immediately.\n       * The onready() queue is processed before soundManager.onload().\n       */\n      onready: () => {\n        // Assign instance of this Angular MusicPlayerService to soundManager object\n        // so that the SMSound Objects can access it\n        soundManager.parent = this;\n\n        // Ready to use; soundManager.createSound() etc. can now be called.\n        // Emit event\n        const isSupported = soundManager.ok();\n        this.musicPlayerEventEmitter.emit({\n          event: MusicPlayerEventConstants.ANGULAR_PLAYER_READY,\n          data: isSupported\n        });\n      },\n      /**\n       * @reference http://www.schillmania.com/projects/soundmanager2/doc/#sm-config\n       * @description ontimeout Events (Callbacks)\n       * Queues an event callback/handler for SM2 init failure, processed at (or immediately,\n       * if added after) SM2 initialization has failed, just before soundManager.onerror() is called.\n       * An optional scope parameter can be specified; if none, the callback is scoped to the window.\n       * Additionally, a status object containing success and error->type parameters is passed as an argument to your callback.\n       */\n      ontimeout: () => {\n        alert('SM2 failed to start. Flash missing, blocked or security error?');\n        alert('The status is ' + this._soundObject.status.success + ', the error type is ' + this._soundObject.status.error.type);\n      },\n      defaultOptions: {\n        // set global default volume for all sound objects\n        autoLoad: false, // enable automatic loading (otherwise .load() will call with .play())\n        autoPlay: false, // enable playing of file ASAP (much faster if \"stream\" is true)\n        from: null, // position to start playback within a sound (msec), see demo\n        loops: 1, // number of times to play the sound. Related: looping (API demo)\n        multiShot: false, // let sounds \"restart\" or \"chorus\" when played multiple times..\n        multiShotEvents: false, // allow events (onfinish()) to fire for each shot, if supported.\n        onid3: null, // callback function for \"ID3 data is added/available\"\n        onload: null, // callback function for \"load finished\"\n        onstop: null, // callback for \"user stop\"\n        onfailure: 'nextTrack', // callback function for when playing fails\n        onpause: null, // callback for \"pause\"\n        onplay: null, // callback for \"play\" start\n        onresume: null, // callback for \"resume\" (pause toggle)\n        position: null, // offset (milliseconds) to seek to within downloaded sound.\n        pan: 0, // \"pan\" settings, left-to-right, -100 to 100\n        stream: true, // allows playing before entire file has loaded (recommended)\n        to: null, // position to end playback within a sound (msec), see demo\n        type: 'audio/mp3', // MIME-like hint for canPlay() tests, eg. 'audio/mp3'\n        usePolicyFile: false, // enable crossdomain.xml request for remote domains (for ID3/waveform access)\n        volume: this.volume, // self-explanatory. 0-100, the latter being the max.\n        /**\n         * SMSound (sound instance) object instance event handler\n         * @note Event handlers are scoped to the relevant sound object,\n         * so the this keyword will point to the sound object on which\n         * the event fired such that its properties can easily be accessed\n         */\n        whileloading: function() {\n          soundManager._writeDebug('sound ' + this.id + ' loading, ' + this.bytesLoaded + ' of ' + this.bytesTotal);\n          const trackLoaded = ((this.bytesLoaded / this.bytesTotal) * 100);\n          const musicPlayerService = soundManager.parent;\n          if (musicPlayerService) {\n            musicPlayerService.musicPlayerEventEmitter.emit({\n              event: MusicPlayerEventConstants.TRACK_LOADED,\n              data: trackLoaded\n            });\n          }\n        },\n        /**\n         * SMSound (sound instance) object instance event handler\n         * @note Event handlers are scoped to the relevant sound object,\n         * so the this keyword will point to the sound object on which\n         * the event fired such that its properties can easily be accessed\n         */\n        whileplaying: function() {\n          soundManager._writeDebug('sound ' + this.id + ' playing, ' + this.position + ' of ' + this.duration);\n          const musicPlayerService = soundManager.parent;\n\n          if (musicPlayerService) {\n            // broadcast current playing track id\n            musicPlayerService.currentTrack = this.id;\n            try {\n              musicPlayerService.trackProgress = ((this.position / this.duration) * 100);\n              musicPlayerService.position = this.position;\n              musicPlayerService.duration = this.duration;\n            } catch (error) {\n              musicPlayerService.trackProgress = 0;\n              musicPlayerService.position = 0;\n              musicPlayerService.duration = 0;\n            }\n\n            const trackEventData: ITrackEvent = {\n              trackId: musicPlayerService.currentTrack,\n              trackProgress: musicPlayerService.trackProgress,\n              trackPosition: this.position,\n              trackDuration: this.duration\n            };\n            musicPlayerService.musicPlayerTrackEventEmitter.emit({\n              event: MusicPlayerEventConstants.TRACK_ID,\n              data: trackEventData\n            });\n          }\n        },\n        /**\n         * SMSound (sound instance) object instance event handler\n         * @note Using ES6 and this refers to the Angular MusicPlayerService instances\n         * instead of the SMSound object instance\n         */\n        onfinish: () => {\n          if (this.autoPlay === true) {\n            this.nextTrack();\n\n            const trackEventData: ITrackEvent = {\n              trackId: this.currentTrack,\n              trackProgress: this.trackProgress,\n              trackDuration: 0,\n              trackPosition: 0\n            };\n            this.musicPlayerTrackEventEmitter.emit({\n              event: MusicPlayerEventConstants.TRACK_ID,\n              data: trackEventData\n            });\n          }\n        }\n      }\n    });\n  }\n\n  setCurrentTrack(key: string): void {\n    this.currentTrack = key;\n  }\n\n  getCurrentTrack() {\n    return this.currentTrack;\n  }\n\n  currentTrackData() {\n    const trackId = this.getCurrentTrack();\n    const currentKey = MusicPlayerUtils.IsInArray(this.playlist, trackId);\n    return this.playlist[currentKey];\n  }\n\n  /**\n   *\n   * @param key\n   */\n  getPlaylist(key?: number): Array<any> {\n    if (typeof key === 'undefined') {\n      return this.playlist;\n    } else {\n      return this.playlist[key];\n    }\n  }\n\n  /**\n   *\n   * @param track\n   */\n  addToPlaylist(track: any): void {\n    this.playlist.push(track);\n    // broadcast playlist\n    this.musicPlayerEventEmitter.emit({\n      event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n      data: this.playlist\n    });\n  }\n\n  /**\n   *\n   * @param track\n   */\n  addTrack(track: any): number {\n    // check if track itself is valid and if its url is playable\n    if (!MusicPlayerUtils.IsTrackValid) {\n      return null;\n    }\n\n    // check if song already does not exists then add to playlist\n    const inArrayKey: number = MusicPlayerUtils.IsInArray(this.getPlaylist(undefined), track.id);\n    if (inArrayKey < 0) {\n      // console.warn('song does not exists in playlist:', track);\n      // add to sound manager\n      soundManager.createSound({\n        id: track.id,\n        url: track.url\n      });\n      // add to playlist\n      this.addToPlaylist(track);\n    }\n    return track.id;\n  }\n\n  removeSong(song: any, index: number): void {\n    // if this song is playing stop it\n    if (song === this.currentTrack) {\n      this.stop();\n    }\n    // unload from soundManager\n    soundManager.destroySound(song);\n\n    // remove from playlist\n    this.playlist.splice(index, 1);\n\n    // once all done then broadcast\n    this.musicPlayerEventEmitter.emit({\n      event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n      data: this.playlist\n    });\n  }\n\n  /**\n   *\n   * @param trackId\n   * @param isResume\n   */\n  initPlayTrack(trackId: string, isResume: boolean): void {\n    if (isResume !== true) {\n      // stop and unload currently playing track\n      this.stop();\n      // set new track as current track\n      this.setCurrentTrack(trackId);\n    }\n    // play it\n    soundManager.play(trackId);\n    const trackEventData: ITrackEvent = {\n      trackId: this.currentTrack,\n      trackProgress: this.trackProgress,\n      trackDuration: this.duration,\n      trackPosition: 0\n    };\n    this.musicPlayerTrackEventEmitter.emit({\n      event: MusicPlayerEventConstants.TRACK_ID,\n      data: trackEventData\n    });\n\n    // set as playing\n    this.isPlaying = true;\n    this.musicPlayerEventEmitter.emit({\n      event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n      data: this.isPlaying\n    });\n  }\n\n  /**\n   * Plays currently selected track\n   * If the track is already playing, ignore event\n   */\n  play(): void {\n    if (!this.isPlaying) {\n      let trackToPlay = null;\n      // check if no track loaded, else play loaded track\n      if (this.getCurrentTrack() === null) {\n        if (soundManager.soundIDs.length === 0) {\n          return;\n        }\n        trackToPlay = soundManager.soundIDs[0];\n        this.initPlayTrack(trackToPlay, false);\n      } else {\n        trackToPlay = this.getCurrentTrack();\n        this.initPlayTrack(trackToPlay, true);\n      }\n    }\n  }\n\n  /**\n   * Toggles Pause state\n   */\n  pause(): void {\n    this.isPlaying = !this.isPlaying;\n    if (this.isPlaying) {\n      soundManager.play(this.currentTrack);\n    } else {\n      soundManager.pause(this.getCurrentTrack());\n    }\n\n    this.musicPlayerEventEmitter.emit({\n      event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n      data: this.isPlaying\n    });\n  }\n\n  /**\n   * Stops audio playback and clears playback status\n   */\n  stop(): void {\n    // first pause it\n    soundManager.pause(this.getCurrentTrack());\n    this.isPlaying = false;\n    this.resetProgress();\n    const trackEventData: ITrackEvent = {\n      trackId: this.currentTrack,\n      trackProgress: this.trackProgress,\n      trackDuration: 0,\n      trackPosition: 0\n    };\n    this.musicPlayerStopEventEmitter.emit({\n      event: MusicPlayerEventConstants.TRACK_STOP,\n      data: trackEventData\n    });\n\n    soundManager.stopAll();\n    soundManager.unload(this.getCurrentTrack());\n  }\n\n  /**\n   * Plays selected track\n   * @param trackId\n   */\n  playTrack(trackId: string): void {\n    this.initPlayTrack(trackId, false);\n  }\n\n  /**\n   *\n   */\n  nextTrack(): void {\n    if (this.getCurrentTrack() === null) {\n      console.log('Please click on Play before this action');\n      return null;\n    }\n\n    const currentTrackKey = MusicPlayerUtils.GetIndexByValue(soundManager.soundIDs, this.getCurrentTrack());\n    const nextTrackKey = +currentTrackKey + 1;\n    const nextTrack = soundManager.soundIDs[nextTrackKey];\n\n    if (typeof nextTrack !== 'undefined') {\n      this.playTrack(nextTrack);\n    } else {\n      // if no next track found\n      if (this.repeat === true) {\n        // start first track if repeat is on\n        this.playTrack(soundManager.soundIDs[0]);\n      } else {\n        // breadcase not playing anything\n        this.isPlaying = false;\n        this.musicPlayerEventEmitter.emit({\n          event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n          data: this.isPlaying\n        });\n      }\n    }\n  }\n\n  /**\n   *\n   */\n  prevTrack(): void {\n    if (this.getCurrentTrack() === null) {\n      console.log('Please click on Play before this action');\n      return null;\n    }\n\n    const currentTrackKey = MusicPlayerUtils.GetIndexByValue(soundManager.soundIDs, this.getCurrentTrack());\n    const prevTrackKey = +currentTrackKey - 1;\n    const prevTrack = soundManager.soundIDs[prevTrackKey];\n\n    if (typeof prevTrack !== 'undefined') {\n      this.playTrack(prevTrack);\n    } else {\n      console.warn('no prev track found!');\n    }\n  }\n\n  /**\n   *  Mute/Unmute audio\n   */\n  mute(): void {\n    if (soundManager.muted === true) {\n      soundManager.unmute();\n    } else {\n      soundManager.mute();\n    }\n\n    this.musicPlayerMuteEventEmitter.emit({\n      event: MusicPlayerEventConstants.MUSIC_MUTE,\n      data: soundManager.muted\n    });\n  }\n\n  /**\n   * Mute Accessor\n   */\n  getMuteStatus() {\n    return soundManager.muted;\n  }\n\n  /**\n   *\n   */\n  repeatToggle(): boolean {\n    if (this.repeat === true) {\n      this.repeat = false;\n    } else {\n      this.repeat = true;\n    }\n\n    this.musicPlayerRepeatEventEmitter.emit({\n      event: MusicPlayerEventConstants.MUSIC_REPEAT,\n      data: this.repeat\n    });\n\n    return false;\n  }\n\n  getRepeatStatus(): boolean {\n    return this.repeat;\n  }\n\n  getVolume(): number {\n    return this.volume;\n  }\n\n  /**\n   *\n   * @param increase\n   */\n  adjustVolume(increase: boolean) {\n    const changeVolume = (volume: number) => {\n      for (let i = 0; i < soundManager.soundIDs.length; i++) {\n        const mySound = soundManager.getSoundById(soundManager.soundIDs[i]);\n        mySound.setVolume(volume);\n      }\n\n      this.musicPlayerVolumeEventEmitter.emit({\n        event: MusicPlayerEventConstants.MUSIC_VOLUME,\n        data: volume\n      });\n    };\n    if (increase === true) {\n      if (this.volume < 100) {\n        this.volume = this.volume + 10;\n        changeVolume(this.volume);\n      }\n    } else {\n      if (this.volume > 0) {\n        this.volume = this.volume - 10;\n        changeVolume(this.volume);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param value\n   */\n  adjustVolumeSlider(value: number) {\n    const changeVolume = (volume: number) => {\n      for (let i = 0; i < soundManager.soundIDs.length; i++) {\n        const mySound = soundManager.getSoundById(soundManager.soundIDs[i]);\n        mySound.setVolume(volume);\n      }\n\n      this.musicPlayerVolumeEventEmitter.emit({\n        event: MusicPlayerEventConstants.MUSIC_VOLUME,\n        data: volume\n      });\n    };\n    changeVolume(value);\n  }\n\n  /**\n   *\n   * @param callback\n   */\n  clearPlaylist(callback?: any) {\n    this.isPlaying = false;\n    this.currentTrack = null;\n    this.resetProgress();\n\n    // unload and destroy soundmanager sounds\n    const smIdsLength = soundManager.soundIDs.length;\n    MusicPlayerUtils.AsyncLoop({\n      length: smIdsLength,\n      functionToLoop: (loop: any/*, i: number*/) => {\n        setTimeout(() => {\n          // custom code\n          soundManager.destroySound(soundManager.soundIDs[0]);\n          // custom code\n          loop();\n        }, 0);\n      },\n      callback: () => {\n        // callback custom code\n        // clear playlist\n        this.playlist = [];\n        this.musicPlayerEventEmitter.emit({\n          event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n          data: this.playlist\n        });\n        if (callback) {\n          // callback custom code\n          callback(true);\n        }\n      }\n    });\n  }\n\n  /**\n   *\n   */\n  resetProgress() {\n    this.trackProgress = 0;\n  }\n\n  isPlayingStatus() {\n    return this.isPlaying;\n  }\n}\n"]}