{"version":3,"file":"ngx-soundmanager2.js","sources":["../package/src/music-player-events.constants.ts","../package/src/music-player.utils.ts","../package/src/music-player.service.ts","../package/src/clear-playlist.directive.ts","../package/src/decrease-volume.directive.ts","../package/src/increase-volume.directive.ts","../package/src/music-player.directive.ts","../package/src/mute-music.directive.ts","../package/src/next-track.directive.ts","../package/src/pause-music.directive.ts","../package/src/play-all.directive.ts","../package/src/play-from-playlist.directive.ts","../package/src/play-music.directive.ts","../package/src/previous-track.directive.ts","../package/src/remove-from-playlist.directive.ts","../package/src/repeat-music.directive.ts","../package/src/stop-music.directive.ts","../package/src/human-time.pipe.ts","../package/src/ngx-soundmanager2.module.ts"],"sourcesContent":["export enum MusicPlayerEventConstants {\n  ANGULAR_PLAYER_READY = 'angularPlayer:ready',\n  // CURRENT_TRACK_DURATION = 'currentTrack:duration',\n  // CURRENT_TRACK_POSITION = 'currentTrack:position',\n  MUSIC_IS_PLAYING = 'music:isPlaying',\n  MUSIC_MUTE = 'music:mute',\n  MUSIC_REPEAT = 'music:repeat',\n  MUSIC_VOLUME = 'music:volume',\n  PLAYER_PLAYLIST = 'player:playlist',\n  SOUND_MANAGER_READY = 'Sound manager ready!',\n  TRACK_ID = 'track:id',\n  TRACK_LOADED = 'track:loaded',\n  TRACK_STOP = 'track:stop',\n  // TRACK_PROGRESS = 'track:progress',\n}\n","\ndeclare const soundManager: any;\n\nexport class MusicPlayerUtils {\n\n  /**\n   *\n   * @param track\n   */\n  static IsTrackValid(track: any): boolean {\n    if (typeof track === 'undefined') {\n      console.warn('invalid track data');\n      return false;\n    }\n\n    if (track.url.indexOf('soundcloud') > -1) {\n      // if soundcloud url\n      if (typeof track.url === 'undefined') {\n        console.warn('invalid soundcloud track url');\n        return false;\n      }\n    } else {\n      if (soundManager.canPlayURL(track.url) !== true) {\n        console.warn('invalid song url');\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * getIndexByValue used by this service\n   */\n  static GetIndexByValue(array: Array<any>, value: any): number {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] === value) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  /**\n   * To check if value is in array\n   */\n  static IsInArray(array: Array<any>, value: string): number {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].id === value) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * asyncLoop\n   * @param o\n   */\n  static AsyncLoop(o: any): void {\n    let i = -1;\n    const loop = () => {\n      i++;\n      if (i === o.length) {\n        o.callback();\n        return;\n      }\n      o.functionToLoop(loop, i);\n    };\n    loop(); // init\n  }\n}\n","import { Inject, Injectable, EventEmitter, Optional } from '@angular/core';\nimport { MusicPlayerEventConstants } from './music-player-events.constants';\nimport { ITrackEvent } from './itrack-event.interface';\nimport { MusicPlayerUtils } from './music-player.utils';\n\ndeclare const soundManager: any;\n\n@Injectable()\nexport class MusicPlayerService {\n\n  currentTrack: string = null;\n\n  repeat = false;\n  autoPlay = true;\n  isPlaying = false;\n\n  trackProgress = 0;\n  volume = 90;\n  position: number;\n  duration: number;\n\n  playlist: Array<any> = [];\n\n  public musicPlayerEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerMuteEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerRepeatEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerStopEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerTrackEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerVolumeEventEmitter: EventEmitter<any> = new EventEmitter();\n\n  private _soundObject: any;\n\n  constructor(\n    @Inject('setupOptions') @Optional() public setupOptions?: Object,\n  ) {\n    this.init(setupOptions);\n  }\n\n  /**\n   * Initialize soundmanager,\n   * requires soundmanager2 to be loaded first\n   */\n  init(setupOptions?: Object): void {\n    if (typeof soundManager === 'undefined') {\n      alert('Please include SoundManager2 Library!');\n    }\n    Object.assign(soundManager.setupOptions, setupOptions);\n    soundManager.setupOptions.ignoreMobileRestrictions = true;\n    this._soundObject = soundManager.setup({\n      preferFlash: false, // prefer 100% HTML5 mode, where both supported\n      debugMode: false,   // enable debugging output\n      useHTML5Audio: true, // http://www.schillmania.com/projects/soundmanager2/doc/#soundmanager-usehtml5audio\n      /**\n       * @reference http://www.schillmania.com/projects/soundmanager2/doc/#sm-config\n       * @description onready Events (Callbacks)\n       * Queues an event callback/handler for successful initialization and \"ready to use\" state of SoundManager 2.\n       * An optional scope parameter can be specified; if none, the callback is scoped to the window.\n       * If onready() is called after successful initialization, the callback will be executed immediately.\n       * The onready() queue is processed before soundManager.onload().\n       */\n      onready: () => {\n        // Assign instance of this Angular MusicPlayerService to soundManager object\n        // so that the SMSound Objects can access it\n        soundManager.parent = this;\n\n        // Ready to use; soundManager.createSound() etc. can now be called.\n        // Emit event\n        const isSupported = soundManager.ok();\n        this.musicPlayerEventEmitter.emit({\n          event: MusicPlayerEventConstants.ANGULAR_PLAYER_READY,\n          data: isSupported\n        });\n      },\n      /**\n       * @reference http://www.schillmania.com/projects/soundmanager2/doc/#sm-config\n       * @description ontimeout Events (Callbacks)\n       * Queues an event callback/handler for SM2 init failure, processed at (or immediately,\n       * if added after) SM2 initialization has failed, just before soundManager.onerror() is called.\n       * An optional scope parameter can be specified; if none, the callback is scoped to the window.\n       * Additionally, a status object containing success and error->type parameters is passed as an argument to your callback.\n       */\n      ontimeout: () => {\n        alert('SM2 failed to start. Flash missing, blocked or security error?');\n        alert('The status is ' + this._soundObject.status.success + ', the error type is ' + this._soundObject.status.error.type);\n      },\n      defaultOptions: {\n        // set global default volume for all sound objects\n        autoLoad: false, // enable automatic loading (otherwise .load() will call with .play())\n        autoPlay: false, // enable playing of file ASAP (much faster if \"stream\" is true)\n        from: null, // position to start playback within a sound (msec), see demo\n        loops: 1, // number of times to play the sound. Related: looping (API demo)\n        multiShot: false, // let sounds \"restart\" or \"chorus\" when played multiple times..\n        multiShotEvents: false, // allow events (onfinish()) to fire for each shot, if supported.\n        onid3: null, // callback function for \"ID3 data is added/available\"\n        onload: null, // callback function for \"load finished\"\n        onstop: null, // callback for \"user stop\"\n        onfailure: 'nextTrack', // callback function for when playing fails\n        onpause: null, // callback for \"pause\"\n        onplay: null, // callback for \"play\" start\n        onresume: null, // callback for \"resume\" (pause toggle)\n        position: null, // offset (milliseconds) to seek to within downloaded sound.\n        pan: 0, // \"pan\" settings, left-to-right, -100 to 100\n        stream: true, // allows playing before entire file has loaded (recommended)\n        to: null, // position to end playback within a sound (msec), see demo\n        type: 'audio/mp3', // MIME-like hint for canPlay() tests, eg. 'audio/mp3'\n        usePolicyFile: false, // enable crossdomain.xml request for remote domains (for ID3/waveform access)\n        volume: this.volume, // self-explanatory. 0-100, the latter being the max.\n        /**\n         * SMSound (sound instance) object instance event handler\n         * @note Event handlers are scoped to the relevant sound object,\n         * so the this keyword will point to the sound object on which\n         * the event fired such that its properties can easily be accessed\n         */\n        whileloading: function() {\n          soundManager._writeDebug('sound ' + this.id + ' loading, ' + this.bytesLoaded + ' of ' + this.bytesTotal);\n          const trackLoaded = ((this.bytesLoaded / this.bytesTotal) * 100);\n          const musicPlayerService = soundManager.parent;\n          if (musicPlayerService) {\n            musicPlayerService.musicPlayerEventEmitter.emit({\n              event: MusicPlayerEventConstants.TRACK_LOADED,\n              data: trackLoaded\n            });\n          }\n        },\n        /**\n         * SMSound (sound instance) object instance event handler\n         * @note Event handlers are scoped to the relevant sound object,\n         * so the this keyword will point to the sound object on which\n         * the event fired such that its properties can easily be accessed\n         */\n        whileplaying: function() {\n          soundManager._writeDebug('sound ' + this.id + ' playing, ' + this.position + ' of ' + this.duration);\n          const musicPlayerService = soundManager.parent;\n\n          if (musicPlayerService) {\n            // broadcast current playing track id\n            musicPlayerService.currentTrack = this.id;\n            try {\n              musicPlayerService.trackProgress = ((this.position / this.duration) * 100);\n              musicPlayerService.position = this.position;\n              musicPlayerService.duration = this.duration;\n            } catch (error) {\n              musicPlayerService.trackProgress = 0;\n              musicPlayerService.position = 0;\n              musicPlayerService.duration = 0;\n            }\n\n            const trackEventData: ITrackEvent = {\n              trackId: musicPlayerService.currentTrack,\n              trackProgress: musicPlayerService.trackProgress,\n              trackPosition: this.position,\n              trackDuration: this.duration\n            };\n            musicPlayerService.musicPlayerTrackEventEmitter.emit({\n              event: MusicPlayerEventConstants.TRACK_ID,\n              data: trackEventData\n            });\n          }\n        },\n        /**\n         * SMSound (sound instance) object instance event handler\n         * @note Using ES6 and this refers to the Angular MusicPlayerService instances\n         * instead of the SMSound object instance\n         */\n        onfinish: () => {\n          if (this.autoPlay === true) {\n            this.nextTrack();\n\n            const trackEventData: ITrackEvent = {\n              trackId: this.currentTrack,\n              trackProgress: this.trackProgress,\n              trackDuration: 0,\n              trackPosition: 0\n            };\n            this.musicPlayerTrackEventEmitter.emit({\n              event: MusicPlayerEventConstants.TRACK_ID,\n              data: trackEventData\n            });\n          }\n        }\n      }\n    });\n  }\n\n  setCurrentTrack(key: string): void {\n    this.currentTrack = key;\n  }\n\n  getCurrentTrack() {\n    return this.currentTrack;\n  }\n\n  currentTrackData() {\n    const trackId = this.getCurrentTrack();\n    const currentKey = MusicPlayerUtils.IsInArray(this.playlist, trackId);\n    return this.playlist[currentKey];\n  }\n\n  /**\n   *\n   * @param key\n   */\n  getPlaylist(key?: number): Array<any> {\n    if (typeof key === 'undefined') {\n      return this.playlist;\n    } else {\n      return this.playlist[key];\n    }\n  }\n\n  /**\n   *\n   * @param track\n   */\n  addToPlaylist(track: any): void {\n    this.playlist.push(track);\n    // broadcast playlist\n    this.musicPlayerEventEmitter.emit({\n      event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n      data: this.playlist\n    });\n  }\n\n  /**\n   *\n   * @param track\n   */\n  addTrack(track: any): number {\n    // check if track itself is valid and if its url is playable\n    if (!MusicPlayerUtils.IsTrackValid) {\n      return null;\n    }\n\n    // check if song already does not exists then add to playlist\n    const inArrayKey: number = MusicPlayerUtils.IsInArray(this.getPlaylist(undefined), track.id);\n    if (inArrayKey < 0) {\n      // console.warn('song does not exists in playlist:', track);\n      // add to sound manager\n      soundManager.createSound({\n        id: track.id,\n        url: track.url\n      });\n      // add to playlist\n      this.addToPlaylist(track);\n    }\n    return track.id;\n  }\n\n  removeSong(song: any, index: number): void {\n    // if this song is playing stop it\n    if (song === this.currentTrack) {\n      this.stop();\n    }\n    // unload from soundManager\n    soundManager.destroySound(song);\n\n    // remove from playlist\n    this.playlist.splice(index, 1);\n\n    // once all done then broadcast\n    this.musicPlayerEventEmitter.emit({\n      event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n      data: this.playlist\n    });\n  }\n\n  /**\n   *\n   * @param trackId\n   * @param isResume\n   */\n  initPlayTrack(trackId: string, isResume: boolean): void {\n    if (isResume !== true) {\n      // stop and unload currently playing track\n      this.stop();\n      // set new track as current track\n      this.setCurrentTrack(trackId);\n    }\n    // play it\n    soundManager.play(trackId);\n    const trackEventData: ITrackEvent = {\n      trackId: this.currentTrack,\n      trackProgress: this.trackProgress,\n      trackDuration: this.duration,\n      trackPosition: 0\n    };\n    this.musicPlayerTrackEventEmitter.emit({\n      event: MusicPlayerEventConstants.TRACK_ID,\n      data: trackEventData\n    });\n\n    // set as playing\n    this.isPlaying = true;\n    this.musicPlayerEventEmitter.emit({\n      event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n      data: this.isPlaying\n    });\n  }\n\n  /**\n   * Plays currently selected track\n   * If the track is already playing, ignore event\n   */\n  play(): void {\n    if (!this.isPlaying) {\n      let trackToPlay = null;\n      // check if no track loaded, else play loaded track\n      if (this.getCurrentTrack() === null) {\n        if (soundManager.soundIDs.length === 0) {\n          return;\n        }\n        trackToPlay = soundManager.soundIDs[0];\n        this.initPlayTrack(trackToPlay, false);\n      } else {\n        trackToPlay = this.getCurrentTrack();\n        this.initPlayTrack(trackToPlay, true);\n      }\n    }\n  }\n\n  /**\n   * Toggles Pause state\n   */\n  pause(): void {\n    this.isPlaying = !this.isPlaying;\n    if (this.isPlaying) {\n      soundManager.play(this.currentTrack);\n    } else {\n      soundManager.pause(this.getCurrentTrack());\n    }\n\n    this.musicPlayerEventEmitter.emit({\n      event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n      data: this.isPlaying\n    });\n  }\n\n  /**\n   * Stops audio playback and clears playback status\n   */\n  stop(): void {\n    // first pause it\n    soundManager.pause(this.getCurrentTrack());\n    this.isPlaying = false;\n    this.resetProgress();\n    const trackEventData: ITrackEvent = {\n      trackId: this.currentTrack,\n      trackProgress: this.trackProgress,\n      trackDuration: 0,\n      trackPosition: 0\n    };\n    this.musicPlayerStopEventEmitter.emit({\n      event: MusicPlayerEventConstants.TRACK_STOP,\n      data: trackEventData\n    });\n\n    soundManager.stopAll();\n    soundManager.unload(this.getCurrentTrack());\n  }\n\n  /**\n   * Plays selected track\n   * @param trackId\n   */\n  playTrack(trackId: string): void {\n    this.initPlayTrack(trackId, false);\n  }\n\n  /**\n   *\n   */\n  nextTrack(): void {\n    if (this.getCurrentTrack() === null) {\n      console.log('Please click on Play before this action');\n      return null;\n    }\n\n    const currentTrackKey = MusicPlayerUtils.GetIndexByValue(soundManager.soundIDs, this.getCurrentTrack());\n    const nextTrackKey = +currentTrackKey + 1;\n    const nextTrack = soundManager.soundIDs[nextTrackKey];\n\n    if (typeof nextTrack !== 'undefined') {\n      this.playTrack(nextTrack);\n    } else {\n      // if no next track found\n      if (this.repeat === true) {\n        // start first track if repeat is on\n        this.playTrack(soundManager.soundIDs[0]);\n      } else {\n        // breadcase not playing anything\n        this.isPlaying = false;\n        this.musicPlayerEventEmitter.emit({\n          event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n          data: this.isPlaying\n        });\n      }\n    }\n  }\n\n  /**\n   *\n   */\n  prevTrack(): void {\n    if (this.getCurrentTrack() === null) {\n      console.log('Please click on Play before this action');\n      return null;\n    }\n\n    const currentTrackKey = MusicPlayerUtils.GetIndexByValue(soundManager.soundIDs, this.getCurrentTrack());\n    const prevTrackKey = +currentTrackKey - 1;\n    const prevTrack = soundManager.soundIDs[prevTrackKey];\n\n    if (typeof prevTrack !== 'undefined') {\n      this.playTrack(prevTrack);\n    } else {\n      console.warn('no prev track found!');\n    }\n  }\n\n  /**\n   *  Mute/Unmute audio\n   */\n  mute(): void {\n    if (soundManager.muted === true) {\n      soundManager.unmute();\n    } else {\n      soundManager.mute();\n    }\n\n    this.musicPlayerMuteEventEmitter.emit({\n      event: MusicPlayerEventConstants.MUSIC_MUTE,\n      data: soundManager.muted\n    });\n  }\n\n  /**\n   * Mute Accessor\n   */\n  getMuteStatus() {\n    return soundManager.muted;\n  }\n\n  /**\n   *\n   */\n  repeatToggle(): boolean {\n    if (this.repeat === true) {\n      this.repeat = false;\n    } else {\n      this.repeat = true;\n    }\n\n    this.musicPlayerRepeatEventEmitter.emit({\n      event: MusicPlayerEventConstants.MUSIC_REPEAT,\n      data: this.repeat\n    });\n\n    return false;\n  }\n\n  getRepeatStatus(): boolean {\n    return this.repeat;\n  }\n\n  getVolume(): number {\n    return this.volume;\n  }\n\n  /**\n   *\n   * @param increase\n   */\n  adjustVolume(increase: boolean) {\n    const changeVolume = (volume: number) => {\n      for (let i = 0; i < soundManager.soundIDs.length; i++) {\n        const mySound = soundManager.getSoundById(soundManager.soundIDs[i]);\n        mySound.setVolume(volume);\n      }\n\n      this.musicPlayerVolumeEventEmitter.emit({\n        event: MusicPlayerEventConstants.MUSIC_VOLUME,\n        data: volume\n      });\n    };\n    if (increase === true) {\n      if (this.volume < 100) {\n        this.volume = this.volume + 10;\n        changeVolume(this.volume);\n      }\n    } else {\n      if (this.volume > 0) {\n        this.volume = this.volume - 10;\n        changeVolume(this.volume);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param value\n   */\n  adjustVolumeSlider(value: number) {\n    const changeVolume = (volume: number) => {\n      for (let i = 0; i < soundManager.soundIDs.length; i++) {\n        const mySound = soundManager.getSoundById(soundManager.soundIDs[i]);\n        mySound.setVolume(volume);\n      }\n\n      this.musicPlayerVolumeEventEmitter.emit({\n        event: MusicPlayerEventConstants.MUSIC_VOLUME,\n        data: volume\n      });\n    };\n    changeVolume(value);\n  }\n\n  /**\n   *\n   * @param callback\n   */\n  clearPlaylist(callback?: any) {\n    this.isPlaying = false;\n    this.currentTrack = null;\n    this.resetProgress();\n\n    // unload and destroy soundmanager sounds\n    const smIdsLength = soundManager.soundIDs.length;\n    MusicPlayerUtils.AsyncLoop({\n      length: smIdsLength,\n      functionToLoop: (loop: any/*, i: number*/) => {\n        setTimeout(() => {\n          // custom code\n          soundManager.destroySound(soundManager.soundIDs[0]);\n          // custom code\n          loop();\n        }, 0);\n      },\n      callback: () => {\n        // callback custom code\n        // clear playlist\n        this.playlist = [];\n        this.musicPlayerEventEmitter.emit({\n          event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n          data: this.playlist\n        });\n        if (callback) {\n          // callback custom code\n          callback(true);\n        }\n      }\n    });\n  }\n\n  /**\n   *\n   */\n  resetProgress() {\n    this.trackProgress = 0;\n  }\n\n  isPlayingStatus() {\n    return this.isPlaying;\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[clearPlaylist]'\n})\nexport class ClearPlaylistDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.stop();\n    this._musicPlayerService.setCurrentTrack(null);\n    this._musicPlayerService.clearPlaylist(/*(data: any) => {}*/);\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[decreaseVolume]'\n})\nexport class DecreaseVolumeDirective {\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.adjustVolume(false);\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[increaseVolume]'\n})\nexport class IncreaseVolumeDirective {\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.adjustVolume(true);\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[musicPlayer]'\n})\nexport class MusicPlayerDirective {\n  @Input() musicPlayer: string;\n  @Input() song: any;\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    let trackId: any;\n    if (this.song) {\n      trackId = this._musicPlayerService.addTrack(this.song);\n\n      if (this.musicPlayer === 'play') {\n        this._musicPlayerService.playTrack(trackId);\n      }\n    }\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[muteMusic]'\n})\nexport class MuteMusicDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.mute();\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[nextTrack]'\n})\nexport class NextTrackDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.nextTrack();\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[pauseMusic]'\n})\nexport class PauseMusicDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.pause();\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[playAll]'\n})\nexport class PlayAllDirective {\n  @Input() songs: Array<any>;\n  @Input() play = true;\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.clearPlaylist((/*data: any*/) => {\n      for (let i = 0; i < this.songs.length; i++) {\n        this._musicPlayerService.addTrack(this.songs[i]);\n      }\n\n      if (this.play) {\n        // play first song\n        this._musicPlayerService.play();\n      }\n    });\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[playFromPlaylist]'\n})\nexport class PlayFromPlaylistDirective {\n  @Input() song: any;\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.playTrack(this.song.id);\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[playMusic]'\n})\nexport class PlayMusicDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.play();\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[previousTrack]'\n})\nexport class PreviousTrackDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.prevTrack();\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[removeFromPlaylist]'\n})\nexport class RemoveFromPlaylistDirective {\n  @Input() song: any;\n  @Input() index: number;\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    console.log('remove:', this.index);\n    this._musicPlayerService.removeSong(this.song.id, this.index);\n  }\n}\n","import { Directive, HostListener, ElementRef, OnInit, OnDestroy } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[repeatMusic]'\n})\nexport class RepeatMusicDirective implements OnInit, OnDestroy {\n\n  repeat: boolean;\n\n  // subscriptions\n  private _musicPlayerRepeatSubscription: any;\n\n  constructor(private _musicPlayerService: MusicPlayerService,\n              private _element: ElementRef) {}\n\n  ngOnInit() {\n    this.repeat = this._musicPlayerService.getRepeatStatus();\n    this.highlight();\n\n    // Subscribe for repeat changes to update bindings\n    this._musicPlayerRepeatSubscription = this._musicPlayerService.musicPlayerRepeatEventEmitter\n      .subscribe((event: any) => {\n        this.repeat = event.data;\n        this.highlight();\n      });\n  }\n\n  ngOnDestroy() {\n    this._musicPlayerRepeatSubscription.unsubscribe();\n  }\n\n  /**\n   * Element click event handler\n   */\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.repeatToggle();\n  }\n\n  /**\n   * Change background color of element based on repeat state\n   */\n  private highlight(): void {\n    this._element.nativeElement.style.backgroundColor = this.repeat ? 'green' : 'red';\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[stopMusic]'\n})\nexport class StopMusicDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.stop();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/*\n * Decorate time string to minutes:seconds\n * Usage:\n *   timeValue | humanTime\n * Example:\n *   {{ 30000 |  humanTime}}\n *   formats to: 00:30\n */\n@Pipe({name: 'humanTime'})\nexport class HumanTimePipe implements PipeTransform {\n  transform(value: number): string {\n    const min = (value / 1000 / 60) << 0;\n    const sec = Math.round((value / 1000) % 60);\n\n    return this.pad(min) + ':' + this.pad(sec);\n  }\n\n  /**\n   * Pads string with zeros if less than 10\n   */\n  private pad(d: number): string {\n    return (d < 10) ? '0' + d.toString() : d.toString();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\n// directives\nimport { ClearPlaylistDirective } from './clear-playlist.directive';\nimport { DecreaseVolumeDirective } from './decrease-volume.directive';\nimport { IncreaseVolumeDirective } from './increase-volume.directive';\nimport { MusicPlayerDirective } from './music-player.directive';\nimport { MuteMusicDirective } from './mute-music.directive';\nimport { NextTrackDirective } from './next-track.directive';\nimport { PauseMusicDirective } from './pause-music.directive';\nimport { PlayAllDirective } from './play-all.directive';\nimport { PlayFromPlaylistDirective } from './play-from-playlist.directive';\nimport { PlayMusicDirective } from './play-music.directive';\nimport { PreviousTrackDirective } from './previous-track.directive';\nimport { RemoveFromPlaylistDirective } from './remove-from-playlist.directive';\nimport { RepeatMusicDirective } from './repeat-music.directive';\nimport { StopMusicDirective } from './stop-music.directive';\n\n\n// pipes\nimport { HumanTimePipe } from './human-time.pipe';\n\n// services\nimport { MusicPlayerService } from './music-player.service';\n\n@NgModule({\n  declarations: [\n    // Directives\n    ClearPlaylistDirective,\n    DecreaseVolumeDirective,\n    IncreaseVolumeDirective,\n    MusicPlayerDirective,\n    MuteMusicDirective,\n    NextTrackDirective,\n    PauseMusicDirective,\n    PlayAllDirective,\n    PlayFromPlaylistDirective,\n    PlayMusicDirective,\n    PreviousTrackDirective,\n    RemoveFromPlaylistDirective,\n    RepeatMusicDirective,\n    StopMusicDirective,\n\n    // Pipes\n    HumanTimePipe\n  ],\n  exports: [\n    // Directives\n    ClearPlaylistDirective,\n    DecreaseVolumeDirective,\n    IncreaseVolumeDirective,\n    MusicPlayerDirective,\n    MuteMusicDirective,\n    NextTrackDirective,\n    PauseMusicDirective,\n    PlayAllDirective,\n    PlayFromPlaylistDirective,\n    PlayMusicDirective,\n    PreviousTrackDirective,\n    RemoveFromPlaylistDirective,\n    RepeatMusicDirective,\n    StopMusicDirective,\n\n    // Pipes\n    HumanTimePipe\n  ]\n})\nexport class NgxSoundmanager2Module {\n  constructor() {}\n  static forRoot(setupOptions?: Object): ModuleWithProviders {\n    return {\n      ngModule: NgxSoundmanager2Module,\n      providers: [\n        MusicPlayerService,\n        { provide: 'setupOptions', useValue: setupOptions }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}