{"version":3,"sources":["ngx-soundmanager2.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","core","this","MusicPlayerEventConstants","ANGULAR_PLAYER_READY","MUSIC_IS_PLAYING","MUSIC_MUTE","MUSIC_REPEAT","MUSIC_VOLUME","PLAYER_PLAYLIST","SOUND_MANAGER_READY","TRACK_ID","TRACK_LOADED","TRACK_STOP","MusicPlayerUtils","IsTrackValid","track","console","warn","url","indexOf","soundManager","canPlayURL","GetIndexByValue","array","value","i","length","IsInArray","id","AsyncLoop","o","loop","functionToLoop","callback","MusicPlayerService","setupOptions","currentTrack","repeat","autoPlay","isPlaying","trackProgress","volume","playlist","musicPlayerEventEmitter","EventEmitter","musicPlayerMuteEventEmitter","musicPlayerRepeatEventEmitter","musicPlayerStopEventEmitter","musicPlayerTrackEventEmitter","musicPlayerVolumeEventEmitter","init","prototype","_this","alert","Object","assign","ignoreMobileRestrictions","_soundObject","setup","preferFlash","debugMode","useHTML5Audio","onready","parent","isSupported","ok","emit","event","data","ontimeout","status","success","error","type","defaultOptions","autoLoad","from","loops","multiShot","multiShotEvents","onid3","onload","onstop","onfailure","onpause","onplay","onresume","position","pan","stream","to","usePolicyFile","whileloading","_writeDebug","bytesLoaded","bytesTotal","trackLoaded","musicPlayerService","whileplaying","duration","trackEventData","trackId","trackPosition","trackDuration","onfinish","nextTrack","setCurrentTrack","key","getCurrentTrack","currentTrackData","currentKey","getPlaylist","addToPlaylist","push","addTrack","undefined","createSound","removeSong","song","index","stop","destroySound","splice","initPlayTrack","isResume","play","trackToPlay","soundIDs","pause","resetProgress","stopAll","unload","playTrack","log","nextTrackKey","prevTrack","prevTrackKey","mute","muted","unmute","getMuteStatus","repeatToggle","getRepeatStatus","getVolume","adjustVolume","increase","changeVolume","getSoundById","setVolume","adjustVolumeSlider","clearPlaylist","smIdsLength","setTimeout","isPlayingStatus","decorators","Injectable","ctorParameters","Inject","args","Optional","ClearPlaylistDirective","_musicPlayerService","onClick","Directive","selector","propDecorators","HostListener","DecreaseVolumeDirective","IncreaseVolumeDirective","MusicPlayerDirective","musicPlayer","Input","MuteMusicDirective","NextTrackDirective","PauseMusicDirective","PlayAllDirective","songs","PlayFromPlaylistDirective","PlayMusicDirective","PreviousTrackDirective","RemoveFromPlaylistDirective","RepeatMusicDirective","_element","ngOnInit","highlight","_musicPlayerRepeatSubscription","subscribe","ngOnDestroy","unsubscribe","nativeElement","style","backgroundColor","ElementRef","StopMusicDirective","HumanTimePipe","transform","min","sec","Math","round","pad","d","toString","Pipe","name","NgxSoundmanager2Module","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","defineProperty"],"mappings":"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","file":"ngx-soundmanager2.umd.min.js.map","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('ngx-soundmanager2', ['exports', '@angular/core'], factory) :\n    (factory((global['ngx-soundmanager2'] = {}),global.ng.core));\n}(this, (function (exports,core) { 'use strict';\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    /** @enum {string} */\n    var MusicPlayerEventConstants = {\n        ANGULAR_PLAYER_READY: 'angularPlayer:ready',\n        // CURRENT_TRACK_DURATION = 'currentTrack:duration',\n        // CURRENT_TRACK_POSITION = 'currentTrack:position',\n        MUSIC_IS_PLAYING: 'music:isPlaying',\n        MUSIC_MUTE: 'music:mute',\n        MUSIC_REPEAT: 'music:repeat',\n        MUSIC_VOLUME: 'music:volume',\n        PLAYER_PLAYLIST: 'player:playlist',\n        SOUND_MANAGER_READY: 'Sound manager ready!',\n        TRACK_ID: 'track:id',\n        TRACK_LOADED: 'track:loaded',\n        TRACK_STOP: 'track:stop',\n    };\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var MusicPlayerUtils = /** @class */ (function () {\n        function MusicPlayerUtils() {\n        }\n        /**\n         *\n         * @param track\n         */\n        /**\n         *\n         * @param {?} track\n         * @return {?}\n         */\n        MusicPlayerUtils.IsTrackValid = /**\n         *\n         * @param {?} track\n         * @return {?}\n         */\n        function (track) {\n            if (typeof track === 'undefined') {\n                console.warn('invalid track data');\n                return false;\n            }\n            if (track.url.indexOf('soundcloud') > -1) {\n                // if soundcloud url\n                if (typeof track.url === 'undefined') {\n                    console.warn('invalid soundcloud track url');\n                    return false;\n                }\n            }\n            else {\n                if (soundManager.canPlayURL(track.url) !== true) {\n                    console.warn('invalid song url');\n                    return false;\n                }\n            }\n            return true;\n        };\n        /**\n         * getIndexByValue used by this service\n         */\n        /**\n         * getIndexByValue used by this service\n         * @param {?} array\n         * @param {?} value\n         * @return {?}\n         */\n        MusicPlayerUtils.GetIndexByValue = /**\n         * getIndexByValue used by this service\n         * @param {?} array\n         * @param {?} value\n         * @return {?}\n         */\n        function (array, value) {\n            for (var /** @type {?} */ i = 0; i < array.length; i++) {\n                if (array[i] === value) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n        /**\n         * To check if value is in array\n         */\n        /**\n         * To check if value is in array\n         * @param {?} array\n         * @param {?} value\n         * @return {?}\n         */\n        MusicPlayerUtils.IsInArray = /**\n         * To check if value is in array\n         * @param {?} array\n         * @param {?} value\n         * @return {?}\n         */\n        function (array, value) {\n            for (var /** @type {?} */ i = 0; i < array.length; i++) {\n                if (array[i].id === value) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n        /**\n         * asyncLoop\n         * @param o\n         */\n        /**\n         * asyncLoop\n         * @param {?} o\n         * @return {?}\n         */\n        MusicPlayerUtils.AsyncLoop = /**\n         * asyncLoop\n         * @param {?} o\n         * @return {?}\n         */\n        function (o) {\n            var /** @type {?} */ i = -1;\n            var /** @type {?} */ loop = function () {\n                i++;\n                if (i === o.length) {\n                    o.callback();\n                    return;\n                }\n                o.functionToLoop(loop, i);\n            };\n            loop(); // init\n        };\n        return MusicPlayerUtils;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var MusicPlayerService = /** @class */ (function () {\n        function MusicPlayerService(setupOptions) {\n            this.setupOptions = setupOptions;\n            this.currentTrack = null;\n            this.repeat = false;\n            this.autoPlay = true;\n            this.isPlaying = false;\n            this.trackProgress = 0;\n            this.volume = 90;\n            this.playlist = [];\n            this.musicPlayerEventEmitter = new core.EventEmitter();\n            this.musicPlayerMuteEventEmitter = new core.EventEmitter();\n            this.musicPlayerRepeatEventEmitter = new core.EventEmitter();\n            this.musicPlayerStopEventEmitter = new core.EventEmitter();\n            this.musicPlayerTrackEventEmitter = new core.EventEmitter();\n            this.musicPlayerVolumeEventEmitter = new core.EventEmitter();\n            this.init(setupOptions);\n        }\n        /**\n         * Initialize soundmanager,\n         * requires soundmanager2 to be loaded first\n         */\n        /**\n         * Initialize soundmanager,\n         * requires soundmanager2 to be loaded first\n         * @param {?=} setupOptions\n         * @return {?}\n         */\n        MusicPlayerService.prototype.init = /**\n         * Initialize soundmanager,\n         * requires soundmanager2 to be loaded first\n         * @param {?=} setupOptions\n         * @return {?}\n         */\n        function (setupOptions) {\n            var _this = this;\n            if (typeof soundManager === 'undefined') {\n                alert('Please include SoundManager2 Library!');\n            }\n            Object.assign(soundManager.setupOptions, setupOptions);\n            soundManager.setupOptions.ignoreMobileRestrictions = true;\n            this._soundObject = soundManager.setup({\n                preferFlash: false,\n                // prefer 100% HTML5 mode, where both supported\n                debugMode: false,\n                // enable debugging output\n                useHTML5Audio: true,\n                // http://www.schillmania.com/projects/soundmanager2/doc/#soundmanager-usehtml5audio\n                /**\n                       * @reference http://www.schillmania.com/projects/soundmanager2/doc/#sm-config\n                       * @description onready Events (Callbacks)\n                       * Queues an event callback/handler for successful initialization and \"ready to use\" state of SoundManager 2.\n                       * An optional scope parameter can be specified; if none, the callback is scoped to the window.\n                       * If onready() is called after successful initialization, the callback will be executed immediately.\n                       * The onready() queue is processed before soundManager.onload().\n                       */\n                onready: function () {\n                    // Assign instance of this Angular MusicPlayerService to soundManager object\n                    // so that the SMSound Objects can access it\n                    soundManager.parent = _this;\n                    // Ready to use; soundManager.createSound() etc. can now be called.\n                    // Emit event\n                    var /** @type {?} */ isSupported = soundManager.ok();\n                    _this.musicPlayerEventEmitter.emit({\n                        event: MusicPlayerEventConstants.ANGULAR_PLAYER_READY,\n                        data: isSupported\n                    });\n                },\n                /**\n                       * @reference http://www.schillmania.com/projects/soundmanager2/doc/#sm-config\n                       * @description ontimeout Events (Callbacks)\n                       * Queues an event callback/handler for SM2 init failure, processed at (or immediately,\n                       * if added after) SM2 initialization has failed, just before soundManager.onerror() is called.\n                       * An optional scope parameter can be specified; if none, the callback is scoped to the window.\n                       * Additionally, a status object containing success and error->type parameters is passed as an argument to your callback.\n                       */\n                ontimeout: function () {\n                    alert('SM2 failed to start. Flash missing, blocked or security error?');\n                    alert('The status is ' + _this._soundObject.status.success + ', the error type is ' + _this._soundObject.status.error.type);\n                },\n                defaultOptions: {\n                    // set global default volume for all sound objects\n                    autoLoad: false,\n                    // enable automatic loading (otherwise .load() will call with .play())\n                    autoPlay: false,\n                    // enable playing of file ASAP (much faster if \"stream\" is true)\n                    from: null,\n                    // position to start playback within a sound (msec), see demo\n                    loops: 1,\n                    // number of times to play the sound. Related: looping (API demo)\n                    multiShot: false,\n                    // let sounds \"restart\" or \"chorus\" when played multiple times..\n                    multiShotEvents: false,\n                    // allow events (onfinish()) to fire for each shot, if supported.\n                    onid3: null,\n                    // callback function for \"ID3 data is added/available\"\n                    onload: null,\n                    // callback function for \"load finished\"\n                    onstop: null,\n                    // callback for \"user stop\"\n                    onfailure: 'nextTrack',\n                    // callback function for when playing fails\n                    onpause: null,\n                    // callback for \"pause\"\n                    onplay: null,\n                    // callback for \"play\" start\n                    onresume: null,\n                    // callback for \"resume\" (pause toggle)\n                    position: null,\n                    // offset (milliseconds) to seek to within downloaded sound.\n                    pan: 0,\n                    // \"pan\" settings, left-to-right, -100 to 100\n                    stream: true,\n                    // allows playing before entire file has loaded (recommended)\n                    to: null,\n                    // position to end playback within a sound (msec), see demo\n                    type: 'audio/mp3',\n                    // MIME-like hint for canPlay() tests, eg. 'audio/mp3'\n                    usePolicyFile: false,\n                    // enable crossdomain.xml request for remote domains (for ID3/waveform access)\n                    volume: this.volume,\n                    // self-explanatory. 0-100, the latter being the max.\n                    /**\n                             * SMSound (sound instance) object instance event handler\n                             * @note Event handlers are scoped to the relevant sound object,\n                             * so the this keyword will point to the sound object on which\n                             * the event fired such that its properties can easily be accessed\n                             */\n                    whileloading: function () {\n                        soundManager._writeDebug('sound ' + this.id + ' loading, ' + this.bytesLoaded + ' of ' + this.bytesTotal);\n                        var /** @type {?} */ trackLoaded = ((this.bytesLoaded / this.bytesTotal) * 100);\n                        var /** @type {?} */ musicPlayerService = soundManager.parent;\n                        if (musicPlayerService) {\n                            musicPlayerService.musicPlayerEventEmitter.emit({\n                                event: MusicPlayerEventConstants.TRACK_LOADED,\n                                data: trackLoaded\n                            });\n                        }\n                    },\n                    /**\n                             * SMSound (sound instance) object instance event handler\n                             * @note Event handlers are scoped to the relevant sound object,\n                             * so the this keyword will point to the sound object on which\n                             * the event fired such that its properties can easily be accessed\n                             */\n                    whileplaying: function () {\n                        soundManager._writeDebug('sound ' + this.id + ' playing, ' + this.position + ' of ' + this.duration);\n                        var /** @type {?} */ musicPlayerService = soundManager.parent;\n                        if (musicPlayerService) {\n                            // broadcast current playing track id\n                            musicPlayerService.currentTrack = this.id;\n                            try {\n                                musicPlayerService.trackProgress = ((this.position / this.duration) * 100);\n                                musicPlayerService.position = this.position;\n                                musicPlayerService.duration = this.duration;\n                            }\n                            catch (/** @type {?} */ error) {\n                                musicPlayerService.trackProgress = 0;\n                                musicPlayerService.position = 0;\n                                musicPlayerService.duration = 0;\n                            }\n                            var /** @type {?} */ trackEventData = {\n                                trackId: musicPlayerService.currentTrack,\n                                trackProgress: musicPlayerService.trackProgress,\n                                trackPosition: this.position,\n                                trackDuration: this.duration\n                            };\n                            musicPlayerService.musicPlayerTrackEventEmitter.emit({\n                                event: MusicPlayerEventConstants.TRACK_ID,\n                                data: trackEventData\n                            });\n                        }\n                    },\n                    /**\n                             * SMSound (sound instance) object instance event handler\n                             * @note Using ES6 and this refers to the Angular MusicPlayerService instances\n                             * instead of the SMSound object instance\n                             */\n                    onfinish: function () {\n                        if (_this.autoPlay === true) {\n                            _this.nextTrack();\n                            var /** @type {?} */ trackEventData = {\n                                trackId: _this.currentTrack,\n                                trackProgress: _this.trackProgress,\n                                trackDuration: 0,\n                                trackPosition: 0\n                            };\n                            _this.musicPlayerTrackEventEmitter.emit({\n                                event: MusicPlayerEventConstants.TRACK_ID,\n                                data: trackEventData\n                            });\n                        }\n                    }\n                }\n            });\n        };\n        /**\n         * @param {?} key\n         * @return {?}\n         */\n        MusicPlayerService.prototype.setCurrentTrack = /**\n         * @param {?} key\n         * @return {?}\n         */\n        function (key) {\n            this.currentTrack = key;\n        };\n        /**\n         * @return {?}\n         */\n        MusicPlayerService.prototype.getCurrentTrack = /**\n         * @return {?}\n         */\n        function () {\n            return this.currentTrack;\n        };\n        /**\n         * @return {?}\n         */\n        MusicPlayerService.prototype.currentTrackData = /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ trackId = this.getCurrentTrack();\n            var /** @type {?} */ currentKey = MusicPlayerUtils.IsInArray(this.playlist, trackId);\n            return this.playlist[currentKey];\n        };\n        /**\n         *\n         * @param key\n         */\n        /**\n         *\n         * @param {?=} key\n         * @return {?}\n         */\n        MusicPlayerService.prototype.getPlaylist = /**\n         *\n         * @param {?=} key\n         * @return {?}\n         */\n        function (key) {\n            if (typeof key === 'undefined') {\n                return this.playlist;\n            }\n            else {\n                return this.playlist[key];\n            }\n        };\n        /**\n         *\n         * @param track\n         */\n        /**\n         *\n         * @param {?} track\n         * @return {?}\n         */\n        MusicPlayerService.prototype.addToPlaylist = /**\n         *\n         * @param {?} track\n         * @return {?}\n         */\n        function (track) {\n            this.playlist.push(track);\n            // broadcast playlist\n            this.musicPlayerEventEmitter.emit({\n                event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n                data: this.playlist\n            });\n        };\n        /**\n         *\n         * @param track\n         */\n        /**\n         *\n         * @param {?} track\n         * @return {?}\n         */\n        MusicPlayerService.prototype.addTrack = /**\n         *\n         * @param {?} track\n         * @return {?}\n         */\n        function (track) {\n            // check if track itself is valid and if its url is playable\n            if (!MusicPlayerUtils.IsTrackValid) {\n                return null;\n            }\n            // check if song already does not exists then add to playlist\n            var /** @type {?} */ inArrayKey = MusicPlayerUtils.IsInArray(this.getPlaylist(undefined), track.id);\n            if (inArrayKey < 0) {\n                // console.warn('song does not exists in playlist:', track);\n                // add to sound manager\n                soundManager.createSound({\n                    id: track.id,\n                    url: track.url\n                });\n                // add to playlist\n                this.addToPlaylist(track);\n            }\n            return track.id;\n        };\n        /**\n         * @param {?} song\n         * @param {?} index\n         * @return {?}\n         */\n        MusicPlayerService.prototype.removeSong = /**\n         * @param {?} song\n         * @param {?} index\n         * @return {?}\n         */\n        function (song, index) {\n            // if this song is playing stop it\n            if (song === this.currentTrack) {\n                this.stop();\n            }\n            // unload from soundManager\n            soundManager.destroySound(song);\n            // remove from playlist\n            this.playlist.splice(index, 1);\n            // once all done then broadcast\n            this.musicPlayerEventEmitter.emit({\n                event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n                data: this.playlist\n            });\n        };\n        /**\n         *\n         * @param trackId\n         * @param isResume\n         */\n        /**\n         *\n         * @param {?} trackId\n         * @param {?} isResume\n         * @return {?}\n         */\n        MusicPlayerService.prototype.initPlayTrack = /**\n         *\n         * @param {?} trackId\n         * @param {?} isResume\n         * @return {?}\n         */\n        function (trackId, isResume) {\n            if (isResume !== true) {\n                // stop and unload currently playing track\n                this.stop();\n                // set new track as current track\n                this.setCurrentTrack(trackId);\n            }\n            // play it\n            soundManager.play(trackId);\n            var /** @type {?} */ trackEventData = {\n                trackId: this.currentTrack,\n                trackProgress: this.trackProgress,\n                trackDuration: this.duration,\n                trackPosition: 0\n            };\n            this.musicPlayerTrackEventEmitter.emit({\n                event: MusicPlayerEventConstants.TRACK_ID,\n                data: trackEventData\n            });\n            // set as playing\n            this.isPlaying = true;\n            this.musicPlayerEventEmitter.emit({\n                event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n                data: this.isPlaying\n            });\n        };\n        /**\n         * Plays currently selected track\n         * If the track is already playing, ignore event\n         */\n        /**\n         * Plays currently selected track\n         * If the track is already playing, ignore event\n         * @return {?}\n         */\n        MusicPlayerService.prototype.play = /**\n         * Plays currently selected track\n         * If the track is already playing, ignore event\n         * @return {?}\n         */\n        function () {\n            if (!this.isPlaying) {\n                var /** @type {?} */ trackToPlay = null;\n                // check if no track loaded, else play loaded track\n                if (this.getCurrentTrack() === null) {\n                    if (soundManager.soundIDs.length === 0) {\n                        return;\n                    }\n                    trackToPlay = soundManager.soundIDs[0];\n                    this.initPlayTrack(trackToPlay, false);\n                }\n                else {\n                    trackToPlay = this.getCurrentTrack();\n                    this.initPlayTrack(trackToPlay, true);\n                }\n            }\n        };\n        /**\n         * Toggles Pause state\n         */\n        /**\n         * Toggles Pause state\n         * @return {?}\n         */\n        MusicPlayerService.prototype.pause = /**\n         * Toggles Pause state\n         * @return {?}\n         */\n        function () {\n            this.isPlaying = !this.isPlaying;\n            if (this.isPlaying) {\n                soundManager.play(this.currentTrack);\n            }\n            else {\n                soundManager.pause(this.getCurrentTrack());\n            }\n            this.musicPlayerEventEmitter.emit({\n                event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n                data: this.isPlaying\n            });\n        };\n        /**\n         * Stops audio playback and clears playback status\n         */\n        /**\n         * Stops audio playback and clears playback status\n         * @return {?}\n         */\n        MusicPlayerService.prototype.stop = /**\n         * Stops audio playback and clears playback status\n         * @return {?}\n         */\n        function () {\n            // first pause it\n            soundManager.pause(this.getCurrentTrack());\n            this.isPlaying = false;\n            this.resetProgress();\n            var /** @type {?} */ trackEventData = {\n                trackId: this.currentTrack,\n                trackProgress: this.trackProgress,\n                trackDuration: 0,\n                trackPosition: 0\n            };\n            this.musicPlayerStopEventEmitter.emit({\n                event: MusicPlayerEventConstants.TRACK_STOP,\n                data: trackEventData\n            });\n            soundManager.stopAll();\n            soundManager.unload(this.getCurrentTrack());\n        };\n        /**\n         * Plays selected track\n         * @param trackId\n         */\n        /**\n         * Plays selected track\n         * @param {?} trackId\n         * @return {?}\n         */\n        MusicPlayerService.prototype.playTrack = /**\n         * Plays selected track\n         * @param {?} trackId\n         * @return {?}\n         */\n        function (trackId) {\n            this.initPlayTrack(trackId, false);\n        };\n        /**\n         *\n         */\n        /**\n         *\n         * @return {?}\n         */\n        MusicPlayerService.prototype.nextTrack = /**\n         *\n         * @return {?}\n         */\n        function () {\n            if (this.getCurrentTrack() === null) {\n                console.log('Please click on Play before this action');\n                return null;\n            }\n            var /** @type {?} */ currentTrackKey = MusicPlayerUtils.GetIndexByValue(soundManager.soundIDs, this.getCurrentTrack());\n            var /** @type {?} */ nextTrackKey = +currentTrackKey + 1;\n            var /** @type {?} */ nextTrack = soundManager.soundIDs[nextTrackKey];\n            if (typeof nextTrack !== 'undefined') {\n                this.playTrack(nextTrack);\n            }\n            else {\n                // if no next track found\n                if (this.repeat === true) {\n                    // start first track if repeat is on\n                    this.playTrack(soundManager.soundIDs[0]);\n                }\n                else {\n                    // breadcase not playing anything\n                    this.isPlaying = false;\n                    this.musicPlayerEventEmitter.emit({\n                        event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n                        data: this.isPlaying\n                    });\n                }\n            }\n        };\n        /**\n         *\n         */\n        /**\n         *\n         * @return {?}\n         */\n        MusicPlayerService.prototype.prevTrack = /**\n         *\n         * @return {?}\n         */\n        function () {\n            if (this.getCurrentTrack() === null) {\n                console.log('Please click on Play before this action');\n                return null;\n            }\n            var /** @type {?} */ currentTrackKey = MusicPlayerUtils.GetIndexByValue(soundManager.soundIDs, this.getCurrentTrack());\n            var /** @type {?} */ prevTrackKey = +currentTrackKey - 1;\n            var /** @type {?} */ prevTrack = soundManager.soundIDs[prevTrackKey];\n            if (typeof prevTrack !== 'undefined') {\n                this.playTrack(prevTrack);\n            }\n            else {\n                console.warn('no prev track found!');\n            }\n        };\n        /**\n         *  Mute/Unmute audio\n         */\n        /**\n         *  Mute/Unmute audio\n         * @return {?}\n         */\n        MusicPlayerService.prototype.mute = /**\n         *  Mute/Unmute audio\n         * @return {?}\n         */\n        function () {\n            if (soundManager.muted === true) {\n                soundManager.unmute();\n            }\n            else {\n                soundManager.mute();\n            }\n            this.musicPlayerMuteEventEmitter.emit({\n                event: MusicPlayerEventConstants.MUSIC_MUTE,\n                data: soundManager.muted\n            });\n        };\n        /**\n         * Mute Accessor\n         */\n        /**\n         * Mute Accessor\n         * @return {?}\n         */\n        MusicPlayerService.prototype.getMuteStatus = /**\n         * Mute Accessor\n         * @return {?}\n         */\n        function () {\n            return soundManager.muted;\n        };\n        /**\n         *\n         */\n        /**\n         *\n         * @return {?}\n         */\n        MusicPlayerService.prototype.repeatToggle = /**\n         *\n         * @return {?}\n         */\n        function () {\n            if (this.repeat === true) {\n                this.repeat = false;\n            }\n            else {\n                this.repeat = true;\n            }\n            this.musicPlayerRepeatEventEmitter.emit({\n                event: MusicPlayerEventConstants.MUSIC_REPEAT,\n                data: this.repeat\n            });\n            return false;\n        };\n        /**\n         * @return {?}\n         */\n        MusicPlayerService.prototype.getRepeatStatus = /**\n         * @return {?}\n         */\n        function () {\n            return this.repeat;\n        };\n        /**\n         * @return {?}\n         */\n        MusicPlayerService.prototype.getVolume = /**\n         * @return {?}\n         */\n        function () {\n            return this.volume;\n        };\n        /**\n         *\n         * @param increase\n         */\n        /**\n         *\n         * @param {?} increase\n         * @return {?}\n         */\n        MusicPlayerService.prototype.adjustVolume = /**\n         *\n         * @param {?} increase\n         * @return {?}\n         */\n        function (increase) {\n            var _this = this;\n            var /** @type {?} */ changeVolume = function (volume) {\n                for (var /** @type {?} */ i = 0; i < soundManager.soundIDs.length; i++) {\n                    var /** @type {?} */ mySound = soundManager.getSoundById(soundManager.soundIDs[i]);\n                    mySound.setVolume(volume);\n                }\n                _this.musicPlayerVolumeEventEmitter.emit({\n                    event: MusicPlayerEventConstants.MUSIC_VOLUME,\n                    data: volume\n                });\n            };\n            if (increase === true) {\n                if (this.volume < 100) {\n                    this.volume = this.volume + 10;\n                    changeVolume(this.volume);\n                }\n            }\n            else {\n                if (this.volume > 0) {\n                    this.volume = this.volume - 10;\n                    changeVolume(this.volume);\n                }\n            }\n        };\n        /**\n         *\n         * @param value\n         */\n        /**\n         *\n         * @param {?} value\n         * @return {?}\n         */\n        MusicPlayerService.prototype.adjustVolumeSlider = /**\n         *\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            var _this = this;\n            var /** @type {?} */ changeVolume = function (volume) {\n                for (var /** @type {?} */ i = 0; i < soundManager.soundIDs.length; i++) {\n                    var /** @type {?} */ mySound = soundManager.getSoundById(soundManager.soundIDs[i]);\n                    mySound.setVolume(volume);\n                }\n                _this.musicPlayerVolumeEventEmitter.emit({\n                    event: MusicPlayerEventConstants.MUSIC_VOLUME,\n                    data: volume\n                });\n            };\n            changeVolume(value);\n        };\n        /**\n         *\n         * @param callback\n         */\n        /**\n         *\n         * @param {?=} callback\n         * @return {?}\n         */\n        MusicPlayerService.prototype.clearPlaylist = /**\n         *\n         * @param {?=} callback\n         * @return {?}\n         */\n        function (callback) {\n            var _this = this;\n            this.isPlaying = false;\n            this.currentTrack = null;\n            this.resetProgress();\n            // unload and destroy soundmanager sounds\n            var /** @type {?} */ smIdsLength = soundManager.soundIDs.length;\n            MusicPlayerUtils.AsyncLoop({\n                length: smIdsLength,\n                functionToLoop: function (loop /*, i: number*/) {\n                    setTimeout(function () {\n                        // custom code\n                        soundManager.destroySound(soundManager.soundIDs[0]);\n                        // custom code\n                        loop();\n                    }, 0);\n                },\n                callback: function () {\n                    // callback custom code\n                    // clear playlist\n                    // callback custom code\n                    // clear playlist\n                    _this.playlist = [];\n                    _this.musicPlayerEventEmitter.emit({\n                        event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n                        data: _this.playlist\n                    });\n                    if (callback) {\n                        // callback custom code\n                        callback(true);\n                    }\n                }\n            });\n        };\n        /**\n         *\n         */\n        /**\n         *\n         * @return {?}\n         */\n        MusicPlayerService.prototype.resetProgress = /**\n         *\n         * @return {?}\n         */\n        function () {\n            this.trackProgress = 0;\n        };\n        /**\n         * @return {?}\n         */\n        MusicPlayerService.prototype.isPlayingStatus = /**\n         * @return {?}\n         */\n        function () {\n            return this.isPlaying;\n        };\n        MusicPlayerService.decorators = [\n            { type: core.Injectable }\n        ];\n        /** @nocollapse */\n        MusicPlayerService.ctorParameters = function () { return [\n            { type: Object, decorators: [{ type: core.Inject, args: ['setupOptions',] }, { type: core.Optional },] },\n        ]; };\n        return MusicPlayerService;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var ClearPlaylistDirective = /** @class */ (function () {\n        function ClearPlaylistDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n        }\n        /**\n         * @return {?}\n         */\n        ClearPlaylistDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            this._musicPlayerService.stop();\n            this._musicPlayerService.setCurrentTrack(null);\n            this._musicPlayerService.clearPlaylist();\n        };\n        ClearPlaylistDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[clearPlaylist]'\n                    },] }\n        ];\n        /** @nocollapse */\n        ClearPlaylistDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        ClearPlaylistDirective.propDecorators = {\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return ClearPlaylistDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var DecreaseVolumeDirective = /** @class */ (function () {\n        function DecreaseVolumeDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n        }\n        /**\n         * @return {?}\n         */\n        DecreaseVolumeDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            this._musicPlayerService.adjustVolume(false);\n        };\n        DecreaseVolumeDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[decreaseVolume]'\n                    },] }\n        ];\n        /** @nocollapse */\n        DecreaseVolumeDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        DecreaseVolumeDirective.propDecorators = {\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return DecreaseVolumeDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var IncreaseVolumeDirective = /** @class */ (function () {\n        function IncreaseVolumeDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n        }\n        /**\n         * @return {?}\n         */\n        IncreaseVolumeDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            this._musicPlayerService.adjustVolume(true);\n        };\n        IncreaseVolumeDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[increaseVolume]'\n                    },] }\n        ];\n        /** @nocollapse */\n        IncreaseVolumeDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        IncreaseVolumeDirective.propDecorators = {\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return IncreaseVolumeDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var MusicPlayerDirective = /** @class */ (function () {\n        function MusicPlayerDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n        }\n        /**\n         * @return {?}\n         */\n        MusicPlayerDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ trackId;\n            if (this.song) {\n                trackId = this._musicPlayerService.addTrack(this.song);\n                if (this.musicPlayer === 'play') {\n                    this._musicPlayerService.playTrack(trackId);\n                }\n            }\n        };\n        MusicPlayerDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[musicPlayer]'\n                    },] }\n        ];\n        /** @nocollapse */\n        MusicPlayerDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        MusicPlayerDirective.propDecorators = {\n            \"musicPlayer\": [{ type: core.Input },],\n            \"song\": [{ type: core.Input },],\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return MusicPlayerDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var MuteMusicDirective = /** @class */ (function () {\n        function MuteMusicDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n        }\n        /**\n         * @return {?}\n         */\n        MuteMusicDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            this._musicPlayerService.mute();\n        };\n        MuteMusicDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[muteMusic]'\n                    },] }\n        ];\n        /** @nocollapse */\n        MuteMusicDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        MuteMusicDirective.propDecorators = {\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return MuteMusicDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var NextTrackDirective = /** @class */ (function () {\n        function NextTrackDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n        }\n        /**\n         * @return {?}\n         */\n        NextTrackDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            this._musicPlayerService.nextTrack();\n        };\n        NextTrackDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[nextTrack]'\n                    },] }\n        ];\n        /** @nocollapse */\n        NextTrackDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        NextTrackDirective.propDecorators = {\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return NextTrackDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var PauseMusicDirective = /** @class */ (function () {\n        function PauseMusicDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n        }\n        /**\n         * @return {?}\n         */\n        PauseMusicDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            this._musicPlayerService.pause();\n        };\n        PauseMusicDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[pauseMusic]'\n                    },] }\n        ];\n        /** @nocollapse */\n        PauseMusicDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        PauseMusicDirective.propDecorators = {\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return PauseMusicDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var PlayAllDirective = /** @class */ (function () {\n        function PlayAllDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n            this.play = true;\n        }\n        /**\n         * @return {?}\n         */\n        PlayAllDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            this._musicPlayerService.clearPlaylist(function () {\n                for (var /** @type {?} */ i = 0; i < _this.songs.length; i++) {\n                    _this._musicPlayerService.addTrack(_this.songs[i]);\n                }\n                if (_this.play) {\n                    // play first song\n                    // play first song\n                    _this._musicPlayerService.play();\n                }\n            });\n        };\n        PlayAllDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[playAll]'\n                    },] }\n        ];\n        /** @nocollapse */\n        PlayAllDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        PlayAllDirective.propDecorators = {\n            \"songs\": [{ type: core.Input },],\n            \"play\": [{ type: core.Input },],\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return PlayAllDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var PlayFromPlaylistDirective = /** @class */ (function () {\n        function PlayFromPlaylistDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n        }\n        /**\n         * @return {?}\n         */\n        PlayFromPlaylistDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            this._musicPlayerService.playTrack(this.song.id);\n        };\n        PlayFromPlaylistDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[playFromPlaylist]'\n                    },] }\n        ];\n        /** @nocollapse */\n        PlayFromPlaylistDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        PlayFromPlaylistDirective.propDecorators = {\n            \"song\": [{ type: core.Input },],\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return PlayFromPlaylistDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var PlayMusicDirective = /** @class */ (function () {\n        function PlayMusicDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n        }\n        /**\n         * @return {?}\n         */\n        PlayMusicDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            this._musicPlayerService.play();\n        };\n        PlayMusicDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[playMusic]'\n                    },] }\n        ];\n        /** @nocollapse */\n        PlayMusicDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        PlayMusicDirective.propDecorators = {\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return PlayMusicDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var PreviousTrackDirective = /** @class */ (function () {\n        function PreviousTrackDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n        }\n        /**\n         * @return {?}\n         */\n        PreviousTrackDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            this._musicPlayerService.prevTrack();\n        };\n        PreviousTrackDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[previousTrack]'\n                    },] }\n        ];\n        /** @nocollapse */\n        PreviousTrackDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        PreviousTrackDirective.propDecorators = {\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return PreviousTrackDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var RemoveFromPlaylistDirective = /** @class */ (function () {\n        function RemoveFromPlaylistDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n        }\n        /**\n         * @return {?}\n         */\n        RemoveFromPlaylistDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            console.log('remove:', this.index);\n            this._musicPlayerService.removeSong(this.song.id, this.index);\n        };\n        RemoveFromPlaylistDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[removeFromPlaylist]'\n                    },] }\n        ];\n        /** @nocollapse */\n        RemoveFromPlaylistDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        RemoveFromPlaylistDirective.propDecorators = {\n            \"song\": [{ type: core.Input },],\n            \"index\": [{ type: core.Input },],\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return RemoveFromPlaylistDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var RepeatMusicDirective = /** @class */ (function () {\n        function RepeatMusicDirective(_musicPlayerService, _element) {\n            this._musicPlayerService = _musicPlayerService;\n            this._element = _element;\n        }\n        /**\n         * @return {?}\n         */\n        RepeatMusicDirective.prototype.ngOnInit = /**\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            this.repeat = this._musicPlayerService.getRepeatStatus();\n            this.highlight();\n            // Subscribe for repeat changes to update bindings\n            this._musicPlayerRepeatSubscription = this._musicPlayerService.musicPlayerRepeatEventEmitter\n                .subscribe(function (event) {\n                _this.repeat = event.data;\n                _this.highlight();\n            });\n        };\n        /**\n         * @return {?}\n         */\n        RepeatMusicDirective.prototype.ngOnDestroy = /**\n         * @return {?}\n         */\n        function () {\n            this._musicPlayerRepeatSubscription.unsubscribe();\n        };\n        /**\n         * Element click event handler\n         * @return {?}\n         */\n        RepeatMusicDirective.prototype.onClick = /**\n         * Element click event handler\n         * @return {?}\n         */\n        function () {\n            this._musicPlayerService.repeatToggle();\n        };\n        /**\n         * Change background color of element based on repeat state\n         * @return {?}\n         */\n        RepeatMusicDirective.prototype.highlight = /**\n         * Change background color of element based on repeat state\n         * @return {?}\n         */\n        function () {\n            this._element.nativeElement.style.backgroundColor = this.repeat ? 'green' : 'red';\n        };\n        RepeatMusicDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[repeatMusic]'\n                    },] }\n        ];\n        /** @nocollapse */\n        RepeatMusicDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n            { type: core.ElementRef, },\n        ]; };\n        RepeatMusicDirective.propDecorators = {\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return RepeatMusicDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var StopMusicDirective = /** @class */ (function () {\n        function StopMusicDirective(_musicPlayerService) {\n            this._musicPlayerService = _musicPlayerService;\n        }\n        /**\n         * @return {?}\n         */\n        StopMusicDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            this._musicPlayerService.stop();\n        };\n        StopMusicDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[stopMusic]'\n                    },] }\n        ];\n        /** @nocollapse */\n        StopMusicDirective.ctorParameters = function () { return [\n            { type: MusicPlayerService, },\n        ]; };\n        StopMusicDirective.propDecorators = {\n            \"onClick\": [{ type: core.HostListener, args: ['click', ['$event'],] },],\n        };\n        return StopMusicDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var HumanTimePipe = /** @class */ (function () {\n        function HumanTimePipe() {\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        HumanTimePipe.prototype.transform = /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            var /** @type {?} */ min = (value / 1000 / 60) << 0;\n            var /** @type {?} */ sec = Math.round((value / 1000) % 60);\n            return this.pad(min) + ':' + this.pad(sec);\n        };\n        /**\n         * Pads string with zeros if less than 10\n         * @param {?} d\n         * @return {?}\n         */\n        HumanTimePipe.prototype.pad = /**\n         * Pads string with zeros if less than 10\n         * @param {?} d\n         * @return {?}\n         */\n        function (d) {\n            return (d < 10) ? '0' + d.toString() : d.toString();\n        };\n        HumanTimePipe.decorators = [\n            { type: core.Pipe, args: [{ name: 'humanTime' },] }\n        ];\n        return HumanTimePipe;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes} checked by tsc\n     */\n    var NgxSoundmanager2Module = /** @class */ (function () {\n        function NgxSoundmanager2Module() {\n        }\n        /**\n         * @param {?=} setupOptions\n         * @return {?}\n         */\n        NgxSoundmanager2Module.forRoot = /**\n         * @param {?=} setupOptions\n         * @return {?}\n         */\n        function (setupOptions) {\n            return {\n                ngModule: NgxSoundmanager2Module,\n                providers: [\n                    MusicPlayerService,\n                    { provide: 'setupOptions', useValue: setupOptions }\n                ]\n            };\n        };\n        NgxSoundmanager2Module.decorators = [\n            { type: core.NgModule, args: [{\n                        declarations: [\n                            ClearPlaylistDirective,\n                            DecreaseVolumeDirective,\n                            IncreaseVolumeDirective,\n                            MusicPlayerDirective,\n                            MuteMusicDirective,\n                            NextTrackDirective,\n                            PauseMusicDirective,\n                            PlayAllDirective,\n                            PlayFromPlaylistDirective,\n                            PlayMusicDirective,\n                            PreviousTrackDirective,\n                            RemoveFromPlaylistDirective,\n                            RepeatMusicDirective,\n                            StopMusicDirective,\n                            HumanTimePipe\n                        ],\n                        exports: [\n                            ClearPlaylistDirective,\n                            DecreaseVolumeDirective,\n                            IncreaseVolumeDirective,\n                            MusicPlayerDirective,\n                            MuteMusicDirective,\n                            NextTrackDirective,\n                            PauseMusicDirective,\n                            PlayAllDirective,\n                            PlayFromPlaylistDirective,\n                            PlayMusicDirective,\n                            PreviousTrackDirective,\n                            RemoveFromPlaylistDirective,\n                            RepeatMusicDirective,\n                            StopMusicDirective,\n                            HumanTimePipe\n                        ]\n                    },] }\n        ];\n        /** @nocollapse */\n        NgxSoundmanager2Module.ctorParameters = function () { return []; };\n        return NgxSoundmanager2Module;\n    }());\n\n    exports.MusicPlayerEventConstants = MusicPlayerEventConstants;\n    exports.ClearPlaylistDirective = ClearPlaylistDirective;\n    exports.DecreaseVolumeDirective = DecreaseVolumeDirective;\n    exports.IncreaseVolumeDirective = IncreaseVolumeDirective;\n    exports.MusicPlayerDirective = MusicPlayerDirective;\n    exports.MuteMusicDirective = MuteMusicDirective;\n    exports.NextTrackDirective = NextTrackDirective;\n    exports.PauseMusicDirective = PauseMusicDirective;\n    exports.PlayAllDirective = PlayAllDirective;\n    exports.PlayFromPlaylistDirective = PlayFromPlaylistDirective;\n    exports.PlayMusicDirective = PlayMusicDirective;\n    exports.PreviousTrackDirective = PreviousTrackDirective;\n    exports.RemoveFromPlaylistDirective = RemoveFromPlaylistDirective;\n    exports.RepeatMusicDirective = RepeatMusicDirective;\n    exports.StopMusicDirective = StopMusicDirective;\n    exports.NgxSoundmanager2Module = NgxSoundmanager2Module;\n    exports.HumanTimePipe = HumanTimePipe;\n    exports.MusicPlayerService = MusicPlayerService;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=ngx-soundmanager2.umd.js.map\n"]}