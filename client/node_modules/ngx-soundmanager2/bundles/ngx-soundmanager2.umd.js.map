{"version":3,"file":"ngx-soundmanager2.umd.js","sources":["../package/src/music-player-events.constants.ts","../package/src/music-player.utils.ts","../package/src/music-player.service.ts","../package/src/clear-playlist.directive.ts","../package/src/decrease-volume.directive.ts","../package/src/increase-volume.directive.ts","../package/src/music-player.directive.ts","../package/src/mute-music.directive.ts","../package/src/next-track.directive.ts","../package/src/pause-music.directive.ts","../package/src/play-all.directive.ts","../package/src/play-from-playlist.directive.ts","../package/src/play-music.directive.ts","../package/src/previous-track.directive.ts","../package/src/remove-from-playlist.directive.ts","../package/src/repeat-music.directive.ts","../package/src/stop-music.directive.ts","../package/src/human-time.pipe.ts","../package/src/ngx-soundmanager2.module.ts"],"sourcesContent":["export enum MusicPlayerEventConstants {\n  ANGULAR_PLAYER_READY = 'angularPlayer:ready',\n  // CURRENT_TRACK_DURATION = 'currentTrack:duration',\n  // CURRENT_TRACK_POSITION = 'currentTrack:position',\n  MUSIC_IS_PLAYING = 'music:isPlaying',\n  MUSIC_MUTE = 'music:mute',\n  MUSIC_REPEAT = 'music:repeat',\n  MUSIC_VOLUME = 'music:volume',\n  PLAYER_PLAYLIST = 'player:playlist',\n  SOUND_MANAGER_READY = 'Sound manager ready!',\n  TRACK_ID = 'track:id',\n  TRACK_LOADED = 'track:loaded',\n  TRACK_STOP = 'track:stop',\n  // TRACK_PROGRESS = 'track:progress',\n}\n","\ndeclare const soundManager: any;\n\nexport class MusicPlayerUtils {\n\n  /**\n   *\n   * @param track\n   */\n  static IsTrackValid(track: any): boolean {\n    if (typeof track === 'undefined') {\n      console.warn('invalid track data');\n      return false;\n    }\n\n    if (track.url.indexOf('soundcloud') > -1) {\n      // if soundcloud url\n      if (typeof track.url === 'undefined') {\n        console.warn('invalid soundcloud track url');\n        return false;\n      }\n    } else {\n      if (soundManager.canPlayURL(track.url) !== true) {\n        console.warn('invalid song url');\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * getIndexByValue used by this service\n   */\n  static GetIndexByValue(array: Array<any>, value: any): number {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] === value) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  /**\n   * To check if value is in array\n   */\n  static IsInArray(array: Array<any>, value: string): number {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].id === value) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * asyncLoop\n   * @param o\n   */\n  static AsyncLoop(o: any): void {\n    let i = -1;\n    const loop = () => {\n      i++;\n      if (i === o.length) {\n        o.callback();\n        return;\n      }\n      o.functionToLoop(loop, i);\n    };\n    loop(); // init\n  }\n}\n","import { Inject, Injectable, EventEmitter, Optional } from '@angular/core';\nimport { MusicPlayerEventConstants } from './music-player-events.constants';\nimport { ITrackEvent } from './itrack-event.interface';\nimport { MusicPlayerUtils } from './music-player.utils';\n\ndeclare const soundManager: any;\n\n@Injectable()\nexport class MusicPlayerService {\n\n  currentTrack: string = null;\n\n  repeat = false;\n  autoPlay = true;\n  isPlaying = false;\n\n  trackProgress = 0;\n  volume = 90;\n  position: number;\n  duration: number;\n\n  playlist: Array<any> = [];\n\n  public musicPlayerEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerMuteEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerRepeatEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerStopEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerTrackEventEmitter: EventEmitter<any> = new EventEmitter();\n  public musicPlayerVolumeEventEmitter: EventEmitter<any> = new EventEmitter();\n\n  private _soundObject: any;\n\n  constructor(\n    @Inject('setupOptions') @Optional() public setupOptions?: Object,\n  ) {\n    this.init(setupOptions);\n  }\n\n  /**\n   * Initialize soundmanager,\n   * requires soundmanager2 to be loaded first\n   */\n  init(setupOptions?: Object): void {\n    if (typeof soundManager === 'undefined') {\n      alert('Please include SoundManager2 Library!');\n    }\n    Object.assign(soundManager.setupOptions, setupOptions);\n    soundManager.setupOptions.ignoreMobileRestrictions = true;\n    this._soundObject = soundManager.setup({\n      preferFlash: false, // prefer 100% HTML5 mode, where both supported\n      debugMode: false,   // enable debugging output\n      useHTML5Audio: true, // http://www.schillmania.com/projects/soundmanager2/doc/#soundmanager-usehtml5audio\n      /**\n       * @reference http://www.schillmania.com/projects/soundmanager2/doc/#sm-config\n       * @description onready Events (Callbacks)\n       * Queues an event callback/handler for successful initialization and \"ready to use\" state of SoundManager 2.\n       * An optional scope parameter can be specified; if none, the callback is scoped to the window.\n       * If onready() is called after successful initialization, the callback will be executed immediately.\n       * The onready() queue is processed before soundManager.onload().\n       */\n      onready: () => {\n        // Assign instance of this Angular MusicPlayerService to soundManager object\n        // so that the SMSound Objects can access it\n        soundManager.parent = this;\n\n        // Ready to use; soundManager.createSound() etc. can now be called.\n        // Emit event\n        const isSupported = soundManager.ok();\n        this.musicPlayerEventEmitter.emit({\n          event: MusicPlayerEventConstants.ANGULAR_PLAYER_READY,\n          data: isSupported\n        });\n      },\n      /**\n       * @reference http://www.schillmania.com/projects/soundmanager2/doc/#sm-config\n       * @description ontimeout Events (Callbacks)\n       * Queues an event callback/handler for SM2 init failure, processed at (or immediately,\n       * if added after) SM2 initialization has failed, just before soundManager.onerror() is called.\n       * An optional scope parameter can be specified; if none, the callback is scoped to the window.\n       * Additionally, a status object containing success and error->type parameters is passed as an argument to your callback.\n       */\n      ontimeout: () => {\n        alert('SM2 failed to start. Flash missing, blocked or security error?');\n        alert('The status is ' + this._soundObject.status.success + ', the error type is ' + this._soundObject.status.error.type);\n      },\n      defaultOptions: {\n        // set global default volume for all sound objects\n        autoLoad: false, // enable automatic loading (otherwise .load() will call with .play())\n        autoPlay: false, // enable playing of file ASAP (much faster if \"stream\" is true)\n        from: null, // position to start playback within a sound (msec), see demo\n        loops: 1, // number of times to play the sound. Related: looping (API demo)\n        multiShot: false, // let sounds \"restart\" or \"chorus\" when played multiple times..\n        multiShotEvents: false, // allow events (onfinish()) to fire for each shot, if supported.\n        onid3: null, // callback function for \"ID3 data is added/available\"\n        onload: null, // callback function for \"load finished\"\n        onstop: null, // callback for \"user stop\"\n        onfailure: 'nextTrack', // callback function for when playing fails\n        onpause: null, // callback for \"pause\"\n        onplay: null, // callback for \"play\" start\n        onresume: null, // callback for \"resume\" (pause toggle)\n        position: null, // offset (milliseconds) to seek to within downloaded sound.\n        pan: 0, // \"pan\" settings, left-to-right, -100 to 100\n        stream: true, // allows playing before entire file has loaded (recommended)\n        to: null, // position to end playback within a sound (msec), see demo\n        type: 'audio/mp3', // MIME-like hint for canPlay() tests, eg. 'audio/mp3'\n        usePolicyFile: false, // enable crossdomain.xml request for remote domains (for ID3/waveform access)\n        volume: this.volume, // self-explanatory. 0-100, the latter being the max.\n        /**\n         * SMSound (sound instance) object instance event handler\n         * @note Event handlers are scoped to the relevant sound object,\n         * so the this keyword will point to the sound object on which\n         * the event fired such that its properties can easily be accessed\n         */\n        whileloading: function() {\n          soundManager._writeDebug('sound ' + this.id + ' loading, ' + this.bytesLoaded + ' of ' + this.bytesTotal);\n          const trackLoaded = ((this.bytesLoaded / this.bytesTotal) * 100);\n          const musicPlayerService = soundManager.parent;\n          if (musicPlayerService) {\n            musicPlayerService.musicPlayerEventEmitter.emit({\n              event: MusicPlayerEventConstants.TRACK_LOADED,\n              data: trackLoaded\n            });\n          }\n        },\n        /**\n         * SMSound (sound instance) object instance event handler\n         * @note Event handlers are scoped to the relevant sound object,\n         * so the this keyword will point to the sound object on which\n         * the event fired such that its properties can easily be accessed\n         */\n        whileplaying: function() {\n          soundManager._writeDebug('sound ' + this.id + ' playing, ' + this.position + ' of ' + this.duration);\n          const musicPlayerService = soundManager.parent;\n\n          if (musicPlayerService) {\n            // broadcast current playing track id\n            musicPlayerService.currentTrack = this.id;\n            try {\n              musicPlayerService.trackProgress = ((this.position / this.duration) * 100);\n              musicPlayerService.position = this.position;\n              musicPlayerService.duration = this.duration;\n            } catch (error) {\n              musicPlayerService.trackProgress = 0;\n              musicPlayerService.position = 0;\n              musicPlayerService.duration = 0;\n            }\n\n            const trackEventData: ITrackEvent = {\n              trackId: musicPlayerService.currentTrack,\n              trackProgress: musicPlayerService.trackProgress,\n              trackPosition: this.position,\n              trackDuration: this.duration\n            };\n            musicPlayerService.musicPlayerTrackEventEmitter.emit({\n              event: MusicPlayerEventConstants.TRACK_ID,\n              data: trackEventData\n            });\n          }\n        },\n        /**\n         * SMSound (sound instance) object instance event handler\n         * @note Using ES6 and this refers to the Angular MusicPlayerService instances\n         * instead of the SMSound object instance\n         */\n        onfinish: () => {\n          if (this.autoPlay === true) {\n            this.nextTrack();\n\n            const trackEventData: ITrackEvent = {\n              trackId: this.currentTrack,\n              trackProgress: this.trackProgress,\n              trackDuration: 0,\n              trackPosition: 0\n            };\n            this.musicPlayerTrackEventEmitter.emit({\n              event: MusicPlayerEventConstants.TRACK_ID,\n              data: trackEventData\n            });\n          }\n        }\n      }\n    });\n  }\n\n  setCurrentTrack(key: string): void {\n    this.currentTrack = key;\n  }\n\n  getCurrentTrack() {\n    return this.currentTrack;\n  }\n\n  currentTrackData() {\n    const trackId = this.getCurrentTrack();\n    const currentKey = MusicPlayerUtils.IsInArray(this.playlist, trackId);\n    return this.playlist[currentKey];\n  }\n\n  /**\n   *\n   * @param key\n   */\n  getPlaylist(key?: number): Array<any> {\n    if (typeof key === 'undefined') {\n      return this.playlist;\n    } else {\n      return this.playlist[key];\n    }\n  }\n\n  /**\n   *\n   * @param track\n   */\n  addToPlaylist(track: any): void {\n    this.playlist.push(track);\n    // broadcast playlist\n    this.musicPlayerEventEmitter.emit({\n      event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n      data: this.playlist\n    });\n  }\n\n  /**\n   *\n   * @param track\n   */\n  addTrack(track: any): number {\n    // check if track itself is valid and if its url is playable\n    if (!MusicPlayerUtils.IsTrackValid) {\n      return null;\n    }\n\n    // check if song already does not exists then add to playlist\n    const inArrayKey: number = MusicPlayerUtils.IsInArray(this.getPlaylist(undefined), track.id);\n    if (inArrayKey < 0) {\n      // console.warn('song does not exists in playlist:', track);\n      // add to sound manager\n      soundManager.createSound({\n        id: track.id,\n        url: track.url\n      });\n      // add to playlist\n      this.addToPlaylist(track);\n    }\n    return track.id;\n  }\n\n  removeSong(song: any, index: number): void {\n    // if this song is playing stop it\n    if (song === this.currentTrack) {\n      this.stop();\n    }\n    // unload from soundManager\n    soundManager.destroySound(song);\n\n    // remove from playlist\n    this.playlist.splice(index, 1);\n\n    // once all done then broadcast\n    this.musicPlayerEventEmitter.emit({\n      event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n      data: this.playlist\n    });\n  }\n\n  /**\n   *\n   * @param trackId\n   * @param isResume\n   */\n  initPlayTrack(trackId: string, isResume: boolean): void {\n    if (isResume !== true) {\n      // stop and unload currently playing track\n      this.stop();\n      // set new track as current track\n      this.setCurrentTrack(trackId);\n    }\n    // play it\n    soundManager.play(trackId);\n    const trackEventData: ITrackEvent = {\n      trackId: this.currentTrack,\n      trackProgress: this.trackProgress,\n      trackDuration: this.duration,\n      trackPosition: 0\n    };\n    this.musicPlayerTrackEventEmitter.emit({\n      event: MusicPlayerEventConstants.TRACK_ID,\n      data: trackEventData\n    });\n\n    // set as playing\n    this.isPlaying = true;\n    this.musicPlayerEventEmitter.emit({\n      event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n      data: this.isPlaying\n    });\n  }\n\n  /**\n   * Plays currently selected track\n   * If the track is already playing, ignore event\n   */\n  play(): void {\n    if (!this.isPlaying) {\n      let trackToPlay = null;\n      // check if no track loaded, else play loaded track\n      if (this.getCurrentTrack() === null) {\n        if (soundManager.soundIDs.length === 0) {\n          return;\n        }\n        trackToPlay = soundManager.soundIDs[0];\n        this.initPlayTrack(trackToPlay, false);\n      } else {\n        trackToPlay = this.getCurrentTrack();\n        this.initPlayTrack(trackToPlay, true);\n      }\n    }\n  }\n\n  /**\n   * Toggles Pause state\n   */\n  pause(): void {\n    this.isPlaying = !this.isPlaying;\n    if (this.isPlaying) {\n      soundManager.play(this.currentTrack);\n    } else {\n      soundManager.pause(this.getCurrentTrack());\n    }\n\n    this.musicPlayerEventEmitter.emit({\n      event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n      data: this.isPlaying\n    });\n  }\n\n  /**\n   * Stops audio playback and clears playback status\n   */\n  stop(): void {\n    // first pause it\n    soundManager.pause(this.getCurrentTrack());\n    this.isPlaying = false;\n    this.resetProgress();\n    const trackEventData: ITrackEvent = {\n      trackId: this.currentTrack,\n      trackProgress: this.trackProgress,\n      trackDuration: 0,\n      trackPosition: 0\n    };\n    this.musicPlayerStopEventEmitter.emit({\n      event: MusicPlayerEventConstants.TRACK_STOP,\n      data: trackEventData\n    });\n\n    soundManager.stopAll();\n    soundManager.unload(this.getCurrentTrack());\n  }\n\n  /**\n   * Plays selected track\n   * @param trackId\n   */\n  playTrack(trackId: string): void {\n    this.initPlayTrack(trackId, false);\n  }\n\n  /**\n   *\n   */\n  nextTrack(): void {\n    if (this.getCurrentTrack() === null) {\n      console.log('Please click on Play before this action');\n      return null;\n    }\n\n    const currentTrackKey = MusicPlayerUtils.GetIndexByValue(soundManager.soundIDs, this.getCurrentTrack());\n    const nextTrackKey = +currentTrackKey + 1;\n    const nextTrack = soundManager.soundIDs[nextTrackKey];\n\n    if (typeof nextTrack !== 'undefined') {\n      this.playTrack(nextTrack);\n    } else {\n      // if no next track found\n      if (this.repeat === true) {\n        // start first track if repeat is on\n        this.playTrack(soundManager.soundIDs[0]);\n      } else {\n        // breadcase not playing anything\n        this.isPlaying = false;\n        this.musicPlayerEventEmitter.emit({\n          event: MusicPlayerEventConstants.MUSIC_IS_PLAYING,\n          data: this.isPlaying\n        });\n      }\n    }\n  }\n\n  /**\n   *\n   */\n  prevTrack(): void {\n    if (this.getCurrentTrack() === null) {\n      console.log('Please click on Play before this action');\n      return null;\n    }\n\n    const currentTrackKey = MusicPlayerUtils.GetIndexByValue(soundManager.soundIDs, this.getCurrentTrack());\n    const prevTrackKey = +currentTrackKey - 1;\n    const prevTrack = soundManager.soundIDs[prevTrackKey];\n\n    if (typeof prevTrack !== 'undefined') {\n      this.playTrack(prevTrack);\n    } else {\n      console.warn('no prev track found!');\n    }\n  }\n\n  /**\n   *  Mute/Unmute audio\n   */\n  mute(): void {\n    if (soundManager.muted === true) {\n      soundManager.unmute();\n    } else {\n      soundManager.mute();\n    }\n\n    this.musicPlayerMuteEventEmitter.emit({\n      event: MusicPlayerEventConstants.MUSIC_MUTE,\n      data: soundManager.muted\n    });\n  }\n\n  /**\n   * Mute Accessor\n   */\n  getMuteStatus() {\n    return soundManager.muted;\n  }\n\n  /**\n   *\n   */\n  repeatToggle(): boolean {\n    if (this.repeat === true) {\n      this.repeat = false;\n    } else {\n      this.repeat = true;\n    }\n\n    this.musicPlayerRepeatEventEmitter.emit({\n      event: MusicPlayerEventConstants.MUSIC_REPEAT,\n      data: this.repeat\n    });\n\n    return false;\n  }\n\n  getRepeatStatus(): boolean {\n    return this.repeat;\n  }\n\n  getVolume(): number {\n    return this.volume;\n  }\n\n  /**\n   *\n   * @param increase\n   */\n  adjustVolume(increase: boolean) {\n    const changeVolume = (volume: number) => {\n      for (let i = 0; i < soundManager.soundIDs.length; i++) {\n        const mySound = soundManager.getSoundById(soundManager.soundIDs[i]);\n        mySound.setVolume(volume);\n      }\n\n      this.musicPlayerVolumeEventEmitter.emit({\n        event: MusicPlayerEventConstants.MUSIC_VOLUME,\n        data: volume\n      });\n    };\n    if (increase === true) {\n      if (this.volume < 100) {\n        this.volume = this.volume + 10;\n        changeVolume(this.volume);\n      }\n    } else {\n      if (this.volume > 0) {\n        this.volume = this.volume - 10;\n        changeVolume(this.volume);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param value\n   */\n  adjustVolumeSlider(value: number) {\n    const changeVolume = (volume: number) => {\n      for (let i = 0; i < soundManager.soundIDs.length; i++) {\n        const mySound = soundManager.getSoundById(soundManager.soundIDs[i]);\n        mySound.setVolume(volume);\n      }\n\n      this.musicPlayerVolumeEventEmitter.emit({\n        event: MusicPlayerEventConstants.MUSIC_VOLUME,\n        data: volume\n      });\n    };\n    changeVolume(value);\n  }\n\n  /**\n   *\n   * @param callback\n   */\n  clearPlaylist(callback?: any) {\n    this.isPlaying = false;\n    this.currentTrack = null;\n    this.resetProgress();\n\n    // unload and destroy soundmanager sounds\n    const smIdsLength = soundManager.soundIDs.length;\n    MusicPlayerUtils.AsyncLoop({\n      length: smIdsLength,\n      functionToLoop: (loop: any/*, i: number*/) => {\n        setTimeout(() => {\n          // custom code\n          soundManager.destroySound(soundManager.soundIDs[0]);\n          // custom code\n          loop();\n        }, 0);\n      },\n      callback: () => {\n        // callback custom code\n        // clear playlist\n        this.playlist = [];\n        this.musicPlayerEventEmitter.emit({\n          event: MusicPlayerEventConstants.PLAYER_PLAYLIST,\n          data: this.playlist\n        });\n        if (callback) {\n          // callback custom code\n          callback(true);\n        }\n      }\n    });\n  }\n\n  /**\n   *\n   */\n  resetProgress() {\n    this.trackProgress = 0;\n  }\n\n  isPlayingStatus() {\n    return this.isPlaying;\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[clearPlaylist]'\n})\nexport class ClearPlaylistDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.stop();\n    this._musicPlayerService.setCurrentTrack(null);\n    this._musicPlayerService.clearPlaylist(/*(data: any) => {}*/);\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[decreaseVolume]'\n})\nexport class DecreaseVolumeDirective {\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.adjustVolume(false);\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[increaseVolume]'\n})\nexport class IncreaseVolumeDirective {\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.adjustVolume(true);\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[musicPlayer]'\n})\nexport class MusicPlayerDirective {\n  @Input() musicPlayer: string;\n  @Input() song: any;\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    let trackId: any;\n    if (this.song) {\n      trackId = this._musicPlayerService.addTrack(this.song);\n\n      if (this.musicPlayer === 'play') {\n        this._musicPlayerService.playTrack(trackId);\n      }\n    }\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[muteMusic]'\n})\nexport class MuteMusicDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.mute();\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[nextTrack]'\n})\nexport class NextTrackDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.nextTrack();\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[pauseMusic]'\n})\nexport class PauseMusicDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.pause();\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[playAll]'\n})\nexport class PlayAllDirective {\n  @Input() songs: Array<any>;\n  @Input() play = true;\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.clearPlaylist((/*data: any*/) => {\n      for (let i = 0; i < this.songs.length; i++) {\n        this._musicPlayerService.addTrack(this.songs[i]);\n      }\n\n      if (this.play) {\n        // play first song\n        this._musicPlayerService.play();\n      }\n    });\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[playFromPlaylist]'\n})\nexport class PlayFromPlaylistDirective {\n  @Input() song: any;\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.playTrack(this.song.id);\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[playMusic]'\n})\nexport class PlayMusicDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.play();\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[previousTrack]'\n})\nexport class PreviousTrackDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.prevTrack();\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[removeFromPlaylist]'\n})\nexport class RemoveFromPlaylistDirective {\n  @Input() song: any;\n  @Input() index: number;\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    console.log('remove:', this.index);\n    this._musicPlayerService.removeSong(this.song.id, this.index);\n  }\n}\n","import { Directive, HostListener, ElementRef, OnInit, OnDestroy } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[repeatMusic]'\n})\nexport class RepeatMusicDirective implements OnInit, OnDestroy {\n\n  repeat: boolean;\n\n  // subscriptions\n  private _musicPlayerRepeatSubscription: any;\n\n  constructor(private _musicPlayerService: MusicPlayerService,\n              private _element: ElementRef) {}\n\n  ngOnInit() {\n    this.repeat = this._musicPlayerService.getRepeatStatus();\n    this.highlight();\n\n    // Subscribe for repeat changes to update bindings\n    this._musicPlayerRepeatSubscription = this._musicPlayerService.musicPlayerRepeatEventEmitter\n      .subscribe((event: any) => {\n        this.repeat = event.data;\n        this.highlight();\n      });\n  }\n\n  ngOnDestroy() {\n    this._musicPlayerRepeatSubscription.unsubscribe();\n  }\n\n  /**\n   * Element click event handler\n   */\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.repeatToggle();\n  }\n\n  /**\n   * Change background color of element based on repeat state\n   */\n  private highlight(): void {\n    this._element.nativeElement.style.backgroundColor = this.repeat ? 'green' : 'red';\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { MusicPlayerService } from './music-player.service';\n\n@Directive({\n  selector: '[stopMusic]'\n})\nexport class StopMusicDirective {\n\n  constructor(private _musicPlayerService: MusicPlayerService) {}\n\n  @HostListener('click', ['$event']) onClick() {\n    this._musicPlayerService.stop();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/*\n * Decorate time string to minutes:seconds\n * Usage:\n *   timeValue | humanTime\n * Example:\n *   {{ 30000 |  humanTime}}\n *   formats to: 00:30\n */\n@Pipe({name: 'humanTime'})\nexport class HumanTimePipe implements PipeTransform {\n  transform(value: number): string {\n    const min = (value / 1000 / 60) << 0;\n    const sec = Math.round((value / 1000) % 60);\n\n    return this.pad(min) + ':' + this.pad(sec);\n  }\n\n  /**\n   * Pads string with zeros if less than 10\n   */\n  private pad(d: number): string {\n    return (d < 10) ? '0' + d.toString() : d.toString();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\n// directives\nimport { ClearPlaylistDirective } from './clear-playlist.directive';\nimport { DecreaseVolumeDirective } from './decrease-volume.directive';\nimport { IncreaseVolumeDirective } from './increase-volume.directive';\nimport { MusicPlayerDirective } from './music-player.directive';\nimport { MuteMusicDirective } from './mute-music.directive';\nimport { NextTrackDirective } from './next-track.directive';\nimport { PauseMusicDirective } from './pause-music.directive';\nimport { PlayAllDirective } from './play-all.directive';\nimport { PlayFromPlaylistDirective } from './play-from-playlist.directive';\nimport { PlayMusicDirective } from './play-music.directive';\nimport { PreviousTrackDirective } from './previous-track.directive';\nimport { RemoveFromPlaylistDirective } from './remove-from-playlist.directive';\nimport { RepeatMusicDirective } from './repeat-music.directive';\nimport { StopMusicDirective } from './stop-music.directive';\n\n\n// pipes\nimport { HumanTimePipe } from './human-time.pipe';\n\n// services\nimport { MusicPlayerService } from './music-player.service';\n\n@NgModule({\n  declarations: [\n    // Directives\n    ClearPlaylistDirective,\n    DecreaseVolumeDirective,\n    IncreaseVolumeDirective,\n    MusicPlayerDirective,\n    MuteMusicDirective,\n    NextTrackDirective,\n    PauseMusicDirective,\n    PlayAllDirective,\n    PlayFromPlaylistDirective,\n    PlayMusicDirective,\n    PreviousTrackDirective,\n    RemoveFromPlaylistDirective,\n    RepeatMusicDirective,\n    StopMusicDirective,\n\n    // Pipes\n    HumanTimePipe\n  ],\n  exports: [\n    // Directives\n    ClearPlaylistDirective,\n    DecreaseVolumeDirective,\n    IncreaseVolumeDirective,\n    MusicPlayerDirective,\n    MuteMusicDirective,\n    NextTrackDirective,\n    PauseMusicDirective,\n    PlayAllDirective,\n    PlayFromPlaylistDirective,\n    PlayMusicDirective,\n    PreviousTrackDirective,\n    RemoveFromPlaylistDirective,\n    RepeatMusicDirective,\n    StopMusicDirective,\n\n    // Pipes\n    HumanTimePipe\n  ]\n})\nexport class NgxSoundmanager2Module {\n  constructor() {}\n  static forRoot(setupOptions?: Object): ModuleWithProviders {\n    return {\n      ngModule: NgxSoundmanager2Module,\n      providers: [\n        MusicPlayerService,\n        { provide: 'setupOptions', useValue: setupOptions }\n      ]\n    };\n  }\n}\n"],"names":["EventEmitter","Injectable","Inject","Optional","Directive","HostListener","Input","ElementRef","Pipe","NgModule"],"mappings":"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"}