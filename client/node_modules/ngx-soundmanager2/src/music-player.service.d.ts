import { EventEmitter } from '@angular/core';
export declare class MusicPlayerService {
    setupOptions: Object;
    currentTrack: string;
    repeat: boolean;
    autoPlay: boolean;
    isPlaying: boolean;
    trackProgress: number;
    volume: number;
    position: number;
    duration: number;
    playlist: Array<any>;
    musicPlayerEventEmitter: EventEmitter<any>;
    musicPlayerMuteEventEmitter: EventEmitter<any>;
    musicPlayerRepeatEventEmitter: EventEmitter<any>;
    musicPlayerStopEventEmitter: EventEmitter<any>;
    musicPlayerTrackEventEmitter: EventEmitter<any>;
    musicPlayerVolumeEventEmitter: EventEmitter<any>;
    private _soundObject;
    constructor(setupOptions?: Object);
    /**
     * Initialize soundmanager,
     * requires soundmanager2 to be loaded first
     */
    init(setupOptions?: Object): void;
    setCurrentTrack(key: string): void;
    getCurrentTrack(): string;
    currentTrackData(): any;
    /**
     *
     * @param key
     */
    getPlaylist(key?: number): Array<any>;
    /**
     *
     * @param track
     */
    addToPlaylist(track: any): void;
    /**
     *
     * @param track
     */
    addTrack(track: any): number;
    removeSong(song: any, index: number): void;
    /**
     *
     * @param trackId
     * @param isResume
     */
    initPlayTrack(trackId: string, isResume: boolean): void;
    /**
     * Plays currently selected track
     * If the track is already playing, ignore event
     */
    play(): void;
    /**
     * Toggles Pause state
     */
    pause(): void;
    /**
     * Stops audio playback and clears playback status
     */
    stop(): void;
    /**
     * Plays selected track
     * @param trackId
     */
    playTrack(trackId: string): void;
    /**
     *
     */
    nextTrack(): void;
    /**
     *
     */
    prevTrack(): void;
    /**
     *  Mute/Unmute audio
     */
    mute(): void;
    /**
     * Mute Accessor
     */
    getMuteStatus(): any;
    /**
     *
     */
    repeatToggle(): boolean;
    getRepeatStatus(): boolean;
    getVolume(): number;
    /**
     *
     * @param increase
     */
    adjustVolume(increase: boolean): void;
    /**
     *
     * @param value
     */
    adjustVolumeSlider(value: number): void;
    /**
     *
     * @param callback
     */
    clearPlaylist(callback?: any): void;
    /**
     *
     */
    resetProgress(): void;
    isPlayingStatus(): boolean;
}
